<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProtoCore</name>
    </assembly>
    <members>
        <member name="M:ProtoCore.AssociativeEngine.Utils.GetGraphNodeAtPC(System.Int32,System.Collections.Generic.List{ProtoCore.AssociativeGraph.GraphNode})">
            <summary>
            Returns the dirty graphnode of the given pc
            </summary>
            <param name="pc"></param>
            <param name="graphNodesInScope"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.GetFirstDirtyGraphNodeFromPC(System.Int32,System.Collections.Generic.List{ProtoCore.AssociativeGraph.GraphNode})">
            <summary>
            Returns the first dirty graphnode starting from the given pc
            </summary>
            <param name="pc"></param>
            <param name="graphNodesInScope"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.MarkAllGraphNodesDirty(System.Collections.Generic.List{ProtoCore.AssociativeGraph.GraphNode})">
            <summary>
            Marks all graphnodes in the scope dirty.
            </summary>
            <param name="graphNodesInScope"></param>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.BuildGraphNodeDependencies(System.Collections.Generic.List{ProtoCore.AssociativeGraph.GraphNode})">
            <summary>
            Builds the dependencies within the list of graphNodes
            </summary>
            <param name="graphNodesInScope"></param>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.DoesExecutingNodeAffectOtherNode(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Check if executing 'execNode' will cause re-execution 'otherNode'
            </summary>
            <param name="execNode"></param>
            <param name="otherNode"></param>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.AreNodesSelfModifyingAndEqualLHS(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Check if both nodes are self modifying and have equal lhs
            Example cases:
                x = x + 1 is equal to x = x + 1
                x = x + 1 is equal to x = a + x + 1
            </summary>
            <param name="varAssignNode"></param>
            <param name="inspectNode"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.AreNodesSelfModifyingAndEqualIdentList(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Check if both nodes are self modifying and have equal lhs
            Example cases:
                x.y = x.y + 1 is equal to x.y = x.y + 1
                x.y = x.y + 1 is equal to x.y = a + x.y + 1
            </summary>
            <param name="varAssignNode"></param>
            <param name="inspectNode"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.AreLHSEqualIdentList(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Checks if both nodes are LHS identlists and that their identlists are equal
            </summary>
            <param name="node"></param>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.AreLHSEqual(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Checks if the lhs (updateNodeRefList) are equal for both graphnodes
            </summary>
            <param name="node"></param>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.GetGraphNodesFromAST(ProtoCore.DSASM.Executable,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            Returns the VM Graphnodes associated with the input ASTs
            </summary>
            <param name="exe"></param>
            <param name="astList"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.IsGlobalScopeDirty(ProtoCore.DSASM.Executable)">
            <summary>
            Determines if at least one graphnode in the glboal scope is dirty
            </summary>
            <param name="exe"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.UpdateDependencyGraph(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.DSASM.Executive,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Find and return all graphnodes that can be reached by executingGraphNode
            </summary>
            <param name="executingGraphNode"></param>
            <param name="executive"></param>
            <param name="exprUID"></param>
            <param name="isSSAAssign"></param>
            <param name="executeSSA"></param>
            <param name="languageBlockID"></param>
            <param name="recursiveSearch"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.IsGraphNodeRedefined(ProtoCore.AssociativeGraph.GraphNode,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Determines if a graphnode was redefined by executingNode
            Given:
                a = b;
                a = 1; 
             Where: 'a = b' has been redefined by 'a = 1'
             
            </summary>
            <param name="gnode"></param>
            <param name="executingNode"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.GetRedefinedGraphNodes(ProtoCore.RuntimeCore,ProtoCore.AssociativeGraph.GraphNode,System.Collections.Generic.List{ProtoCore.AssociativeGraph.GraphNode},System.Int32,System.Int32)">
            <summary>
            GetRedefinedGraphNodes will return a list of graphnodes that have been redefined by executingGraphNode
            
            Given:
                [1] a = b + c
                [2] a = d
            Statement [1] has been redefined by statment [2]    
            Returns true if this has occured
            
            </summary>
            <param name="runtimeCore"></param>
            <param name="executingGraphNode"></param>
            <param name="nodesInScope"></param>
            <param name="classScope"></param>
            <param name="functionScope"></param>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.GetFirstSSAGraphnode(System.Int32,System.Collections.Generic.List{ProtoCore.AssociativeGraph.GraphNode})">
            <summary>
            Find the first dirty node of the graphnode residing at indexOfDirtyNode
            </summary>
            <param name="indexOfDirtyNode"></param>
            <param name="nodesInScope"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AssociativeEngine.Utils.MarkGraphNodesDirtyAtGlobalScope(ProtoCore.RuntimeCore,System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
             Finds all graphnodes associated with each AST and marks them dirty. Returns the first dirty node
            </summary>
            <param name="core"></param>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
        <member name="P:ProtoCore.AssociativeGraph.GraphNode.ChildrenNodes">
            <summary>
            Children nodes are nodes that will be marked dirty if this graphnode is executed
                a = 1 &lt;- the child of this graphnode is 'b = a'
                b = a 
            </summary>
        </member>
        <member name="P:ProtoCore.AssociativeGraph.GraphNode.ParentNodes">
            <summary>
            Parent nodes are the nodes that this graphnode is dependent on
                a = 1
                b = a &lt;- the parent of this graphnode is 'a = 1'
            </summary>
        </member>
        <member name="P:ProtoCore.AssociativeGraph.GraphNode.symbolListWithinExpression">
            <summary>
            This is the list of lhs symbols in the same expression ID
            It is applicable for expressions transformed to SSA where each ssa temp in the same expression is in this list
            This list is only populated on the last SSA assignment as such:
                
            Given
                a = b.c.d
                
                [0] t0 = b      -> List empty
                [1] t1 = t0.c   -> List empty
                [2] t2 = t1.d   -> List empty
                [3] a = t2      -> This is the last SSA stmt, its graphnode contains a list of graphnodes {t0,t1,t2}
                
            </summary>
        </member>
        <member name="P:ProtoCore.AssociativeGraph.GraphNode.isActive">
            <summary>
            Flag determines if a graph node is active or not. If inactive, the graph node is invalid
            this is especially used in the LiveRunner to mark modified/deleted nodes inactive so that they are not executed
            </summary>
        </member>
        <member name="M:ProtoCore.AssociativeGraph.GraphNode.ClearCycles(System.Collections.Generic.IEnumerable{ProtoCore.AssociativeGraph.GraphNode})">
            <summary>
            Walk dependency graph of this graph node, clear cyclic dependency flag,
            and mark graph nodes active.
            </summary>
            <param name="graphNodes"></param>
            <returns>Collection of graph nodes participating in cycle.</returns>
        </member>
        <member name="P:ProtoCore.DSASM.ClassNode.ExternLib">
            <summary>
            String description of where the classnode was loaded from 
            The implementation of the class is stored from here
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.GetClassHierarchy(ProtoCore.DSASM.ClassNode)">
            <summary>
            Returns the class hierarchy for a given class node.
            If A derives from B, which in turn derives from C,
            the hierarchy for A returned is in the order: [A, B, C].
            </summary>
            <param name="node"></param>
            <returns>List of classes in hierarchy.</returns>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.GetClassNodeAtIndex(System.Int32)">
            <summary>
            Retreive the ClassNode at the index.  
            </summary>
            <param name="index"></param>
            <returns>ClassNode if found, else null value</returns>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.IndexOf(System.String)">
            <summary>
            Find a matching class for given partial class name.
            </summary>
            <param name="partialName">Partial class name for lookup.</param>
            <returns>Class Id if found, else ProtoCore.DSASM.Constants.kInvalidIndex</returns>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.GetClassId(System.String)">
            <summary>
            Returns Class Id for the given fully qualified class name.
            </summary>
            <param name="fullname">Fully qualified class name</param>
            <returns>Class Id if found, else ProtoCore.DSASM.Constants.kInvalidIndex</returns>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.TryGetFullyQualifiedName(System.String,System.String@)">
            <summary>
            Tries to get the fully qualified name for the given name from this
            ClassTable.
            </summary>
            <param name="name">Partial name of the class for lookup</param>
            <param name="fullName">Fully qualified class name</param>
            <returns>True if the given name results a unique matching symbol in 
            this ClassTable.</returns>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.GetAllMatchingClasses(System.String)">
            <summary>
            Returns all matching classes for the given name from this ClassTable.
            If the classes have a common base class, this simply returns the given name of the class.
            </summary>
            <param name="name">Partial name of the class for lookup</param>
            <returns>Array of fully qualified name of all matching symbols</returns>
        </member>
        <member name="M:ProtoCore.DSASM.ClassTable.AuditMultipleDefinition(ProtoCore.BuildStatus,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Audits the class table for multiple symbol definition.
            </summary>
            <param name="status">BuildStatus to log the warnings if
            multiple symbol found.</param>
            <param name="graphNode"></param>
        </member>
        <member name="T:ProtoCore.DSASM.Op">
            <summary>
            Translate an operator to other representations.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetOpCode(ProtoCore.DSASM.Operator)">
            <summary>
            Returns the corresponding opcode of an operator.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetUnaryOpCode(ProtoCore.DSASM.UnaryOperator)">
            <summary>
            Returns the corresponding opcode of an unary operator.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetOpSymbol(ProtoCore.DSASM.Operator)">
            <summary>
            Returns the symbol representation of an operator. E.g., return "+"
            for Operator.add.
            </summary>
            <param name="op">Operator</param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetUnaryOpSymbol(ProtoCore.DSASM.UnaryOperator)">
            <summary>
            Returns the symbol representation of an unary operator. E.g., return
            "-" for UnaryOperator.neg
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetOpName(ProtoCore.DSASM.Operator)">
            <summary>
            Returns the string representation of an operator. E.g., return "add"
            for Operator.add.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetUnaryOpName(ProtoCore.DSASM.UnaryOperator)">
            <summary>
            Returns the string representation of an unary operator. E.g., return 
            "not" for UnaryOperator.not.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetOpFunction(ProtoCore.DSASM.Operator)">
            <summary>
            Returns the internal function name for operator.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Op.GetUnaryOpFunction(ProtoCore.DSASM.UnaryOperator)">
            <summary>
            Returns the internal function name for unary operator
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.#ctor(System.Int32,ProtoCore.DSASM.Heap)">
            <summary>
            Create an array with pre-allocated size.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.#ctor(ProtoCore.DSASM.StackValue[],ProtoCore.DSASM.Heap)">
            <summary>
            Create an array and populate with input values
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.CollectElementsForGC(System.Collections.Generic.Queue{ProtoCore.DSASM.StackValue})">
            <summary>
            Enqueue all reference-typed element.
            Note: it is only used by heap manager to do garbage collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.ContainsKey(ProtoCore.DSASM.StackValue)">
            <summary>
            Returns true if array contain key or not.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.RemoveKey(ProtoCore.DSASM.StackValue)">
            <summary>
            Remove a key from array. Return true if key exsits.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.CopyArray(ProtoCore.Type,ProtoCore.RuntimeCore)">
            <summary>
            Copy an array and coerce its elements/values to target type
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.SetValueForIndex(System.Int32,ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            array[index] = value. The array will be expanded if necessary.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.SetValueForIndex(ProtoCore.DSASM.StackValue,ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            array[index] = value. Here index can be any type. 
            
            Note this function doesn't support the replication of array indexing.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.SetValueForIndices(ProtoCore.DSASM.StackValue[],ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
             <summary>
             array[index1][index2][...][indexN] = value, and
             indices = {index1, index2, ..., indexN}
            
             Note this function doesn't support the replication of array indexing.
             </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.SetValueForIndices(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            array[index1][index2][...][indexN] = value, and
            indices = {index1, index2, ..., indexN}
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.GetValueFromIndex(System.Int32,ProtoCore.RuntimeCore)">
            <summary>
            = array[index]
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.GetValueFromIndex(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            = array[index].
            
            Note this function doesn't support the replication of array indexing.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.GetValueFromIndices(ProtoCore.DSASM.StackValue[],ProtoCore.RuntimeCore)">
            <summary>
            = array[index1][index2][...][indexN], and
            indices = {index1, index2, ..., indexN}
            
            Note this function doesn't support the replication of array indexing.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSArray.GetValueFromIndices(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.RuntimeCore)">
            <summary>
            = array[index1][index2][...][indexN], and
            indices = {index1, index2, ..., indexN}
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.DSObject.ExpandBySize(System.Int32)">
             <summary>
             Expand the memory by specified size so that the object can contain
             extra information.
            
             Exception ProtoCore.Exceptions.RunOutOfMemoryException
             </summary>
        </member>
        <member name="T:ProtoCore.DSASM.InstructionStream">
            <summary>
            InstructionStream holds the executable dsasm code and relevant information
            </summary>
            
        </member>
        <member name="T:ProtoCore.DSASM.Executable">
            <summary>
            Executable holds the body of code that will be executed along with associated
            meta-information
            </summary>
            
        </member>
        <member name="P:ProtoCore.DSASM.Executable.classTable">
            <summary>
            RuntimeData is set in the executable to isolate data passed to the runtime VM
            The RuntimeData will eventually be integrated completely into executable,
            this means moving RuntimeData properties to Executable and deprecating the RuntimeData object
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.Executable.DynamicVarTable">
            <summary>
            This is a mapping of the current guid and number of callsites that appear within that guid.
            Language only execution contains only 1 guid for the entire program.
            Execution within a visual programming host means 1 guid per node, where 1 node contains a set of DS code.
            Each of the callsite instances are mapped to a guid and an instance count.
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.Executable.UpdatedSymbols">
            <summary>
             These are the list of symbols updated by the VM after an execution cycle
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.CodeBlock.#ctor(System.Guid,ProtoCore.DSASM.CodeBlockType,ProtoCore.Language,System.Int32,ProtoCore.DSASM.SymbolTable,ProtoCore.DSASM.ProcedureTable,System.Boolean,ProtoCore.Core)">
            <summary>
            A CodeBlock represents a body of DS code
            </summary>
            <param name="guid"></param>
            <param name="type"></param>
            <param name="langId"></param>
            <param name="cbID"></param>
            <param name="symbols"></param>
            <param name="procTable"></param>
            <param name="isBreakableBlock"></param>
            <param name="core"></param>
        </member>
        <member name="F:ProtoCore.DSASM.Executive.graphNodesInProgramScope">
            <summary>
            This is the list of graphnodes that are reachable from the current state
            This is updated for every bounce and function call
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.SetupGraphNodesInScope">
            <summary>
            Cache the graphnodes in scope
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.Bounce(System.Int32,System.Int32,ProtoCore.DSASM.StackFrame,System.Int32,System.Boolean,ProtoCore.DSASM.Executive,System.Collections.Generic.List{ProtoCore.DSASM.Instruction})">
            <summary>
            Bounce instantiates a new Executive 
            Execution jumps to the new executive
            This iverload handles debugger properties when bouncing
            </summary>
            <param name="exeblock"></param>
            <param name="entry"></param>
            <param name="stackFrame"></param>
            <param name="locals"></param>
            <param name="exec"></param>
            <param name="fepRun"></param>
            <param name="breakpoints"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.BounceUsingExecutive(ProtoCore.DSASM.Executive,System.Int32,System.Int32,ProtoCore.DSASM.StackFrame,System.Int32,System.Boolean,ProtoCore.DSASM.Executive,System.Collections.Generic.List{ProtoCore.DSASM.Instruction})">
            <summary>
            Bounce to an existing executive
            </summary>
            <param name="executive"></param>
            <param name="exeblock"></param>
            <param name="entry"></param>
            <param name="stackFrame"></param>
            <param name="locals"></param>
            <param name="fepRun"></param>
            <param name="exec"></param>
            <param name="breakpoints"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.IsGlobalScope">
            <summary>
            Determines if the runtime is not inside a function 
            Will also return true if within a nested language block
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.SetupGraphEntryPoint(System.Int32,System.Boolean)">
            <summary>
            Sets up the first graph to be executed
            </summary>
            <param name="entrypoint"></param>
            <param name="isGlobalScope"></param>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.SetupGraphNodesForEntry(System.Int32)">
            <summary>
            Sets graphnodes dirty flag to true
            Returns the entry point
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.DebugPerformCoercionAndGC(ProtoCore.DebugFrame)">
            <summary>
            Performs type coercion of returned value and GC of arguments, this ptr and Dot methods
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.RestoreDebugPropsOnReturnFromBuiltIns">
            <summary>
            Pops Debug stackframe, performs coercion and GC and pops stackframe if there's a break inside the function
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.DebugReturnFromFunctionCall(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,ProtoCore.DebugFrame@)">
            <summary>
            Restores Debug properties from function call and/or from Dot call
            </summary>
            <param name="currentPC"></param>
            <param name="exeblock"></param>
            <param name="ci"></param>
            <param name="fi"></param>
            <param name="isReplicating"></param>
            <param name="debugFrame"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.Execute(System.Int32,System.Int32,System.Collections.Generic.List{ProtoCore.DSASM.Instruction},ProtoCore.Language)">
            <summary>
            This is the VM execution entry function
            </summary>
            <param name="exeblock"></param>
            <param name="entry"></param>
            <param name="breakpoints"></param>
            <param name="language"></param>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.HandleOverflow(System.Func{System.Int64},System.Func{System.Int64})">
            <summary>
            Handles possible overflows from a checked operation. If it works, its result is
            returned, otherwise the result of the unchecked operation is returned and a warning
            is logged.
            </summary>
            <param name="checkedOperation">Checked operation to be attempted first</param>
            <param name="uncheckedOperation">Unchecked operation to be perfomed when the checked operation overflowed</param>
            <returns>The result of the first succesful operation</returns>
        </member>
        <member name="M:ProtoCore.DSASM.Executive.GetNextGraphNodeToExecute(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the next graphnode to execute given the current next pc and scope
            </summary>
            <param name="nextPC"></param>
            <param name="ci"></param>
            <param name="fi"></param>
        </member>
        <member name="M:ProtoCore.DSASM.HeapElement.#ctor(System.Int32,ProtoCore.DSASM.Heap)">
            <summary>
            Create HeapElement
            </summary>
            <param name="size"></param>
            <param name="heap"></param>
        </member>
        <member name="M:ProtoCore.DSASM.HeapElement.#ctor(ProtoCore.DSASM.StackValue[],ProtoCore.DSASM.Heap)">
            <summary>
            Create HeapElement based on the existing values
            </summary>
            <param name="values"></param>
            <param name="heap"></param>
        </member>
        <member name="T:ProtoCore.DSASM.StringTable">
            <summary>
            String table to store all DS strings. 
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.StringTable.AddString(System.Int32,System.String)">
            <summary>
            Add string to the string table. 
            </summary>
            <param name="pointer">The index of HeapElement that represents the string</param>
            <param name="s"></param>
        </member>
        <member name="M:ProtoCore.DSASM.StringTable.TryGetString(System.Int32,System.String@)">
            <summary>
            Returns string from the string table.
            </summary>
            <param name="pointer">The index of HeapElement that represents the string</param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.StringTable.TryGetPointer(System.String,System.Int32@)">
            <summary>
            Returns the index of HeapElement that represents the string
            </summary>
            <param name="s"></param>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocateArray(ProtoCore.DSASM.StackValue[])">
             <summary>
             Allocate an array.
            
             Exceptions: ProtoCore.Exceptions.RunOutOfMemoryException
             </summary>
             <param name="values">Array elements whose indices are integer</param>
             <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocatePointer(ProtoCore.DSASM.StackValue[],ProtoCore.DSASM.MetaData)">
            <summary>
            Allocate an object pointer.
            </summary>
            <param name="values">Values of object properties</param>
            <param name="metaData">Object type</param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocatePointer(ProtoCore.DSASM.StackValue[])">
             <summary>
             Allocate an object pointer.
            
             Exceptions: ProtoCore.Exceptions.RunOutOfMemoryException
             </summary>
             <param name="values">Values of object properties</param>
             <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocatePointer(System.Int32,ProtoCore.DSASM.MetaData)">
             <summary>
             Allocate an object pointer.
            
             Exceptions: ProtoCore.Exceptions.RunOutOfMemoryException
             </summary>
             <param name="size">The size of object properties.</param>
             <param name="metadata">Object type</param>
             <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocateStringInternal(System.String,System.Boolean)">
            <summary>
            Allocate a string, the string will be put in string table.
            </summary>
            <param name="str"></param>
            <param name="isConstant"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocateFixedString(System.String)">
            <summary>
            Allocate string constant. String constant won't be garbage collected.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.AllocateString(System.String)">
            <summary>
            Allocate string. 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.GetString(ProtoCore.DSASM.DSString)">
            <summary>
            Returns string that pointer represents.
            </summary>
            <param name="dsString"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.RecursiveMark(ProtoCore.DSASM.StackValue)">
            <summary>
            Recursively mark all objects referenced by the object and change the
            color of this object to black.
            </summary>
            <param name="root">StackValue</param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.StartCollection">
            <summary>
            Put all roots in gray list and be ready for gc.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.SingleStep(System.Boolean)">
            <summary>
            Move gc a step forward.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.Sweep">
            <summary>
            Sweep all heap elements that are marked as white.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.MarkAllWhite">
            <summary>
            Mark all heap elements as white.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.WriteBarrierForward(ProtoCore.DSASM.HeapElement,ProtoCore.DSASM.StackValue)">
            <summary>
            If the heap object is modified, mark the new value that it references to.
            </summary>
            <param name="hp">Heap object that is to be modified</param>
            <param name="value">The value that will be put in the heap object</param>
        </member>
        <member name="P:ProtoCore.DSASM.Heap.IsWaitingForRoots">
            <summary>
            Returns true if the heap is waiting for GC root objects.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.SetRoots(System.Collections.Generic.IEnumerable{ProtoCore.DSASM.StackValue},ProtoCore.DSASM.Executive)">
            <summary>
            Notify the heap that gc roots are ready so that gc could move
            forward. The executive is passed for dispoing objects.
            </summary>
            <param name="gcroots"></param>
            <param name="exe"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.GC">
            <summary>
            GC
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Heap.FullGC(System.Collections.Generic.IEnumerable{ProtoCore.DSASM.StackValue},ProtoCore.DSASM.Executive)">
            <summary>
            Do a full GC cycle
            </summary>
            <param name="gcroots"></param>
            <param name="exe"></param>
        </member>
        <member name="M:ProtoCore.DSASM.StackValue.ShallowClone">
            <summary>
            Although StackValue is a struct and assignment creates a copy
            of StackValue on stack, ShallowClone() has an explicit meaning
            to do copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProtoCore.DSASM.StackValue.RawData">
            <summary>
            Returns raw data without checking its type or do type conversion.
            Use with caution.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.StackValue.TryGetArrayKey(ProtoCore.DSASM.StackValue@,System.Int32@)">
            <summary>
            Try to get the host array and key value from StackValue. The address
            type of StackValue should be AddressType.ArrayKey. 
            </summary>
            <param name="array"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.StackValue.GetNextKey(ProtoCore.RuntimeCore)">
            <summary>
            Returns an array's next key
            </summary>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.StackValue.ToBoolean(ProtoCore.RuntimeCore)">
            <summary>
            Convert StackValue to boolean typed StackValue. Returns 
            StackValue.Null if not able to do conversion.
            </summary>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.StackValue.ToDouble">
            <summary>
            Convert numeric typed StackValue to double typed StackValue. For
            other types, returns StackValue.Null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.StackValue.ToInteger">
            <summary>
            Convert numeric typed StackValue to integer typed StackValue. For
            other types, returns StackValue.Null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.DSASM.Mirror.ExecutionMirror">
            <summary>
            Provides reflective capabilities over the execution of a DSASM Executable
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.Mirror.ExecutionMirror.#ctor(ProtoCore.DSASM.Executive,ProtoCore.RuntimeCore)">
            <summary>
            Create a mirror for a given executive
            </summary>
            <param name="exec"></param>
            <param name="coreObj"></param>
        </member>
        <member name="M:ProtoCore.DSASM.Mirror.ExecutionMirror.SetValueAndExecute(System.String,System.Nullable{System.Int32})">
            <summary>
            Reset an existing value and re-execute the vm
            </summary>
            <param name="varName"></param>
            <param name="value"></param>
        </member>
        <member name="M:ProtoCore.DSASM.Mirror.ExecutionMirror.GetValue(System.String,System.Int32)">
            <summary>
            Searching variable name starting from specified block.
            Exception:
                SymbolNotFoundException if variable not found.
            </summary>
            <param name="name"></param>
            <param name="startBlock"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.Mirror.ExecutionMirror.Unpack(ProtoCore.DSASM.StackValue,ProtoCore.DSASM.Heap,ProtoCore.RuntimeCore,System.Int32)">
            <summary>
            Do the recursive unpacking of the data structure into mirror objects
            </summary>
            <param name="val"></param>
            <param name="heap"></param>
            <param name="runtimeCore"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.DSASM.StackFrameType">
            <summary>
            Stack frame type.
            </summary>
        </member>
        <member name="T:ProtoCore.DSASM.StackFrame">
            <summary>
            Stack frame.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.StackUtils.CompareStackValues(ProtoCore.DSASM.StackValue,ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Deep comparison for two StackValue. 
            </summary>
            <param name="sv1"></param>
            <param name="sv2"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.DSASM.DynamicFunction">
            <summary>
            It represents an unresolved function in the code. For any unresolved
            function, a DynamicFunction instance will be created and be added to
            DynamicFunctionTable. At runtime, callr will fetch the corresponding
            DynamicFunction instance from DynamicFunctionTable, and based on its 
            name/argument number/class scope to resolves function dynamically.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.FunctionPointerTable.TryGetFunction(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore,ProtoCore.DSASM.ProcedureNode@)">
            <summary>
            Try to get the original procedure node that the function pointer
            points to. 
            </summary>
            <param name="functionPointer">Function pointer</param>
            <param name="runtimeCore">Core</param>
            <param name="procNode">Procedure node</param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.DSASM.BiDictionaryOneToOne`2">
            <summary>
            This is a dictionary guaranteed to have only one of each value and key. 
            It may be searched either by TFirst or by TSecond, giving a unique answer because it is 1 to 1.
            </summary>
            <typeparam name="TFirst">The type of the "key"</typeparam>
            <typeparam name="TSecond">The type of the "value"</typeparam>
        </member>
        <member name="M:ProtoCore.DSASM.BiDictionaryOneToOne`2.TryAdd(`0,`1)">
            <summary>
            Tries to add the pair to the dictionary.
            Returns false if either element is already in the dictionary        
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns>true if successfully added, false if either element are already in the dictionary</returns>
        </member>
        <member name="M:ProtoCore.DSASM.BiDictionaryOneToOne`2.TryGetByFirst(`0,`1@)">
            <summary>
            Find the TSecond corresponding to the TFirst first.
            Returns false if first is not in the dictionary.
            </summary>
            <param name="first">the key to search for</param>
            <param name="second">the corresponding value</param>
            <returns>true if first is in the dictionary, false otherwise</returns>
        </member>
        <member name="M:ProtoCore.DSASM.BiDictionaryOneToOne`2.TryGetBySecond(`1,`0@)">
            <summary>
            Find the TFirst corresponding to the TSecond second.
            Returns false if second is not in the dictionary.
            </summary>
            <param name="second">the key to search for</param>
            <param name="first">the corresponding value</param>
            <returns>true if second is in the dictionary, false otherwise</returns>
        </member>
        <member name="P:ProtoCore.DSASM.BiDictionaryOneToOne`2.Count">
            <summary>
            The number of pairs stored in the dictionary
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.Name">
            <summary>
            Name of the procedure
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.PC">
            <summary>
            First instruction of the procedure
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.LocalCount">
            <summary>
            Number of local variables
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.ArgumentTypes">
            <summary>
            List of arguments required by the procedure
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.ArgumentInfos">
            <summary>
            List of arguments' information (default value) 
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.ReturnType">
            <summary>
            Procedure return data type
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.IsConstructor">
            <summary>
            Flag whether procedure is a constructor or not
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.IsStatic">
            <summary>
            Flag whether procedure is a static function or not
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.RuntimeIndex">
            <summary>
            Index of the procedure at the runtime executable tables
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.ID">
            <summary>
            Index of the procedure in its procedure table
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.ClassID">
            <summary>
            Index of the class that the procedure belongs to
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.HashID">
            <summary>
            The hash of the function given the name and argument type string
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureNode.GraphNodeList">
            <summary>
            The list of graphnodes that this function owns
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureTable.RuntimeIndex">
            <summary>
            The index of this procedure table in the executable's procedure
            table list.
            </summary>
        </member>
        <member name="P:ProtoCore.DSASM.ProcedureTable.Procedures">
            <summary>
            All procedure nodes defined in this procedure table.
            </summary>
        </member>
        <member name="M:ProtoCore.DSASM.ProcedureTable.#ctor(System.Int32)">
            <summary>
            Create an empty procedure table.
            </summary>
            <param name="runtimeindex"></param>
        </member>
        <member name="M:ProtoCore.DSASM.ProcedureTable.GetFunctionsByName(System.String)">
            <summary>
            Returns function with specified name. 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.ProcedureTable.GetPropertyGetterByName(System.String)">
            <summary>
            Returns getter function for given property name.
            Ex: for X property of Point, this method returns get_X(Point p).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.ProcedureTable.GetFunctionsByNameAndArgumentNumber(System.String,System.Int32)">
             <summary>
             Returns all functions with specified name and the number of argument.
            
             It also returns function that has default arguments but the total 
             parameter number is larger that the specified argument number.
             </summary>
             <param name="name"></param>
             <param name="argumentNumber"></param>
             <returns></returns>
        </member>
        <member name="M:ProtoCore.DSASM.ProcedureTable.GetFunctionBySignature(ProtoCore.DSASM.ProcedureMatchOptions,ProtoCore.DSASM.ProcedureNode@)">
            <summary>
            Get function by its signature.
            </summary>
            <param name="opts">Matching options</param>
            <param name="outputProcNode">Output procedure node. Null if nothing is found</param>
            <returns>Index of the ProcedureNode in the Procedures list. Returns -1 If nothing is found</returns>
        </member>
        <member name="M:ProtoCore.DSASM.SymbolTable.UndefineSymbol(ProtoCore.DSASM.SymbolNode)">
            <summary>
            Method to undefine a symbol from the symboltable entry and cache
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="T:ProtoCore.OutputMessage">
            <summary>
            VM print out message
            </summary>
        </member>
        <member name="M:ProtoCore.BuildStatus.RemoveUnboundVariableWarnings(System.Collections.Generic.HashSet{ProtoCore.DSASM.SymbolNode})">
            <summary>
            Remove unbound variable warnings that match all symbols in the symbolList
            </summary>
            <param name="symbolList"></param>
        </member>
        <member name="M:ProtoCore.BuildStatus.LogSymbolConflictWarning(System.String,System.String[])">
            <summary>
            Logs the warning where the usage of a symbol (symbolName) cannot be 
            resolved because it collides with multiple symbols(collidingSymbolNames) 
            </summary>
            <param name="symbolName"></param>
            <param name="collidingSymbolNames"></param>
        </member>
        <member name="M:ProtoCore.BuildStatus.LogUnboundVariableWarning(ProtoCore.DSASM.SymbolNode,System.String,System.String,System.Int32,System.Int32,ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Logs the unbound variable warning and sets the unbound symbol
            </summary>
            <param name="unboundSymbol"></param>
            <param name="message"></param>
            <param name="fileName"></param>
            <param name="line"></param>
            <param name="col"></param>
            <param name="graphNode"></param>
        </member>
        <member name="M:ProtoCore.LanguageCodeBlock.Equals(ProtoCore.LanguageCodeBlock)">
            <summary>
            Equality check for properties of a language block
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CodeGen.PushGraphNode(ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Append the graphnode to the instruction stream and procedure nodes
            </summary>
            <param name="graphnode"></param>
        </member>
        <member name="M:ProtoCore.CodeGen.GenerateCallsiteIdentifierForGraphNode(ProtoCore.AssociativeGraph.GraphNode,System.String)">
            <summary>
            Generates unique identifier for the callsite associated with the graphnode
            </summary>
            <param name="graphNode"></param>
            <param name="procName"></param>
        </member>
        <member name="M:ProtoCore.CodeGen.VerifyAllocationInScope(System.String,System.Int32,System.Int32,ProtoCore.DSASM.SymbolNode@,System.Boolean@)">
            <summary>
            Verifies the allocation of a variable in the given symbol table
            </summary>
            <param name="name"></param>
            <param name="classScope"></param>
            <param name="functionScope"></param>
            <param name="symbol"></param>
            <param name="isAccessible"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CodeGen.VerifyAllocation(System.String,System.Int32,System.Int32,ProtoCore.DSASM.SymbolNode@,System.Boolean@)">
            <summary>
            Verify the allocation of a variable in the current scope and parent scopes
            </summary>
            <param name="name"></param>
            <param name="classScope"></param>
            <param name="functionScope"></param>
            <param name="symbol"></param>
            <param name="isAccessible"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.CodeGenDS">
            <summary>
            The code generator takes Abstract Syntax Tree and generates the DesignScript code
            </summary>
        </member>
        <member name="M:ProtoCore.CodeGenDS.#ctor(System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            This is used during ProtoAST generation to connect BinaryExpressionNode's 
            generated from Block nodes to its child AST tree - pratapa
            </summary>
        </member>
        <member name="M:ProtoCore.CodeGenDS.EmitCode(System.String)">
            <summary>
            This function prints the DS code into the destination stream
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:ProtoCore.CompileTime.Context.WatchClassScope">
            <summary>
            When compiling expression interpreter code, the codegen needs a copy of certain runtime values
            </summary>
        </member>
        <member name="P:ProtoCore.CompileTime.Context.applySSATransform">
            <summary>
            This flag controls whether we want a full codeblock to apply SSA Transform.
            Currently it is used to prevent SSA on inline conditional bodies. 
            This will be resolved when inline replication is fixed
            </summary>
        </member>
        <member name="T:ProtoCore.ReplicationGuide">
            <summary>
            Represents a single replication guide entity that is associated with an argument to a function
            
            Given:
                a = f(i&lt;1&gt;, j&lt;2L&gt;)
                
                &lt;1&gt; and &lt;2L&gt; are each represented by a ReplicationGuide instance
                
            </summary>
        </member>
        <member name="P:ProtoCore.Options.IsDeltaCompile">
            <summary>
            TODO: Aparajit: This flag is true for Delta AST compilation
            This will be removed once we make this the default and deprecate "deltaCompileStartPC" 
            which requires recompiling the entire source code for every delta execution 
            </summary>
        </member>
        <member name="P:ProtoCore.Core.FunctionTable">
            <summary>
            Properties in under COMPILER_GENERATED_TO_RUNTIME_DATA, are generated at compile time, and passed to RuntimeData/Exe
            Only Core can initialize these
            </summary>
        </member>
        <member name="P:ProtoCore.Core.IsParsingPreloadedAssembly">
            <summary>
            This flag is set true when we call GraphUtilities.PreloadAssembly to load libraries.
            </summary>
        </member>
        <member name="P:ProtoCore.Core.IsCodeBlockNodeFirstPass">
            <summary>
            This flag is set true when we recompile CBNs after function definitions are compiled.
            </summary>
        </member>
        <member name="P:ProtoCore.Core.IsParsingCodeBlockNode">
            <summary>
            This is set to true when the temporary core is used for precompilation of CBN's.
            </summary>
        </member>
        <member name="P:ProtoCore.Core.ForLoopBlockIndex">
            <summary>
            ForLoopBlockIndex tracks the current number of new for loop blocks created at compile time for every new compile phase
            It is reset for delta compilation
            </summary>
        </member>
        <member name="M:ProtoCore.Core.AddContextData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:ProtoCore.Core.DebuggerProperties">
            <summary>
            Debugger properties generated at compile time.
            This is copied to the RuntimeCore after compilation
            </summary>
        </member>
        <member name="M:ProtoCore.Core.SetFunctionInactive(ProtoCore.AST.AssociativeAST.FunctionDefinitionNode)">
            <summary>
            Sets the function to an inactive state where it can no longer be used by the front-end and backend
            </summary>
            <param name="functionDef"></param>
        </member>
        <member name="M:ProtoCore.Core.ResetForDeltaExecution">
            <summary>
            Reset the VM state for delta execution.
            </summary>
        </member>
        <member name="P:ProtoCore.Core.ExpressionUID">
            <summary> 
            ExpressionUID is used as the unique id to identify an expression
            It is incremented by 1 after mapping its current value to an expression
            </summary>
        </member>
        <member name="M:ProtoCore.Core.GetRuntimeTableSize">
            <summary>
            Gets the size to be used for runtime tables of symbols, procedures and instruction streams.
            Note: since blocks are stored consecutively but may have gaps due to procedures being deleted,
            this is based on largest id rather than amount of blocks.
            </summary>
        </member>
        <member name="P:ProtoCore.DebugProperties.DebugEntryPC">
            <summary>
            Returns the Program counter. This is only valid when the executive is suspended
            </summary>
        </member>
        <member name="M:ProtoCore.DebugProperties.RestoreCallrForNoBreak(ProtoCore.RuntimeCore,ProtoCore.DSASM.ProcedureNode,System.Boolean)">
            <summary>
            Called only when we step over a function (including replicated and external functions) 
            Pops Debug stackframe and Restores breakpoints 
            </summary>
            <param name="runtimeCore"></param>
            <param name="fNode"></param>
            <param name="isReplicating"></param>
        </member>
        <member name="T:ProtoCore.Lang.ContinuationStructure">
            <summary>
            Continuation structure holds the data for a partial execution of a replicated callsite
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.Done">
            <summary>
            True iff execution is complete
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.Result">
            <summary>
            This represents the result. If execution of the callsite is complete this is the retun value, otherwise it is a partial value
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.NextDispatchArgs">
            <summary>
            This is the resolved list of arguments that should be used to execute the function end point
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.RunningResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.IsFirstCall">
            <summary>
            This flag indicates whether the current FEP call is a continuation of a replicating call
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.InitialDotCallDimensions">
            <summary>
            These are cached at the first replicating call so that they can be used in GC when the replication is Done
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.InitialPC">
            <summary>
            The instruction point of the replicating CALLR instruction needs to be cached in order to return to the next instruction at end of replication
            </summary>
        </member>
        <member name="P:ProtoCore.Lang.ContinuationStructure.InitialDepth">
            <summary>
            The depth of the replicating member function used in determining thisPtr
            </summary>
        </member>
        <member name="M:ProtoCore.Lang.FunctionTable.InitGlobalFunctionEntry(System.Int32)">
            <summary>
            Initialize the global function table entry for a class
            The argument is the index of the class of functions to initialize + 1, which is the index expected at callsite
            </summary>
            <param name="classIndexAtCallsite"></param>
        </member>
        <member name="P:ProtoCore.Lang.Obj.DsasmValue">
            <summary>
            This represents a tieback value into the DSASM execution engine
            </summary>
        </member>
        <member name="T:ProtoCore.Lang.Replication.DominantListStructure">
            <summary>
            The positions of items at dominant list.
            </summary>
        </member>
        <member name="M:ProtoCore.Lang.Replication.AtLevelHandler.GetArgumentAtLevelStructure(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.AtLevel},ProtoCore.RuntimeCore)">
            <summary>
            Returns arguments at the corresponding levles and dominant list structure.
            </summary>
            <param name="arguments"></param>
            <param name="atLevels"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.AtLevelHandler.RestoreDominantStructure(ProtoCore.DSASM.StackValue,ProtoCore.Lang.Replication.DominantListStructure,System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.RuntimeCore)">
            <summary>
            If an input is a dominant list, restructure the result based on the
            structure of dominant list. 
            
            Note the dominant structure will be restored only if the dominant
            list is zipped with other arguments, or the replication is applied
            to the dominant list firstly.
            </summary>
            <param name="ret"></param>
            <param name="domStructure"></param>
            <param name="instructions"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.Lang.Replication.ZipAlgorithm">
            <summary>
            How should the zip algorithm handle cases where one data stream
            is longer than the other
            </summary>
        </member>
        <member name="T:ProtoCore.Lang.Replication.ReplicationInstruction">
            <summary>
            Representation of the replication algorithm
            </summary>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.BuildPartialReplicationInstructions(System.Collections.Generic.List{System.Collections.Generic.List{ProtoCore.ReplicationGuide}})">
             <summary>
             Calculate partial replication instruciton based on replication guide level.
             For example, for foo(xs&lt;1&gt;&lt;2&gt;&lt;3&gt;, ys&lt;1&gt;&lt;1&gt;&lt;2&gt;, zs&lt;1&gt;&lt;1&gt;&lt;3&gt;), the guides
             are:
             
                 level |  0  |  1  |  2  |
                 ------+-----+-----+-----+
                   xs  |  1  |  2  |  3  |
                 ------+-----+-----+-----+
                   ys  |  1  |  1  |  2  |
                 ------+-----+-----+-----+
                   zs  |  1  |  1  |  3  |
            
             This function goes through each level and calculate replication instructions.
             
             replication instructions on level 0:
                 Zip replication on (0, 1, 2) (i.e., zip on xs, ys, zs)
            
             replication instructions on level 1:
                 Zip replication on (1, 2)    (i.e., zip on ys, zs)
                 Cartesian replication on 0   (i.e., on xs)
            
             replication instructions on level 2:
                 Cartesian replication on 1   (i.e., on ys)
                 Zip replication on (0, 2)    (i.e., zip on xs, zs)
             </summary>
             <param name="partialRepGuides"></param>
             <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.ReductionToInstructions(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction})">
            <summary>
            Convert reduction to instruction. Using zip-first strategy.
            
            For example,
                0 2 4   > Zip on 1,2
                0 1 3   > Zip on 1,2
                0 0 2   > Cartesian on 2
                0 0 1   > Cartesian on 2
            </summary>
            <param name="reductions"></param>
            <param name="providedControl"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.ComputeAllReducedParams(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.RuntimeCore)">
            <summary>
            For each parameter, if there is a replication instruction for it, and
            if it is an array, expand parameter list based on the types of elements
            in that array. For example, for parameters
            
                {p1, p2, ..., pk, ..., pn} where pk is an array 
                
                {a1:int, a2:string, a3:double, ...} 
            
            and there is a Cartesian replication on pk, the parameter list will be
            expanded to
            
                {p1, p2, ..., a1, ..., pn}
                {p1, p2, ..., a2, ..., pn}
                {p1, p2, ..., a3, ..., pn}
                ...
            
            </summary>
            <param name="formalParams"></param>
            <param name="replicationInstructions"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.ComputeAllReducedParamsWithoutArraySampling(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.RuntimeCore)">
            <summary>
            Similar to ComputeAllReducedParams except for the fact that all arrays are inspected
            for compatible types. As a result, the number of produced reduced params can increase
            considerably, which is why this should only be used in the context of a last resort
            replication match criteria.
            </summary>
            <param name="formalParams"></param>
            <param name="replicationInstructions"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.EstimateReducedParams(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.RuntimeCore)">
            <summary>
            Compute the effects of the replication guides on the formal parameter lists
            The results of this loose data, and will not be correct on jagged arrays of hetrogenius types
            </summary>
            <param name="formalParams"></param>
            <param name="replicationInstructions"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.BuildAllocation(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="count">Count is the number of elements left for allocation</param>
            <param name="maxAlloc">Max alloc is the maximum potential reductions that can yet be applied</param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.BuildReplicationCombinations(System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.RuntimeCore)">
            <summary>
            Build all possible replications based on the rank of parameters and
            the provided replicatoin guide.
            </summary>
            <param name="providedControl"></param>
            <param name="formalParams"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.GetMaxReductionDepth(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Returns the maximum depth to which an element can be reduced
            This will include cases where only partial reduction can be performed on jagged arrays
            </summary>
            <param name="sv"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Lang.Replication.Replicator.RecursiveProtectGetMaxReductionDepth(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore,System.Int32)">
            <summary>
            This computes the max depth to which the element can be reduced
            It contains a protected envelope 
            </summary>
            <param name="sv"></param>
            <param name="runtimeCore"></param>
            <param name="depthCount"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.CallSite.RawTraceData">
            <summary>
            Trace data for a specific callsite
            </summary>
        </member>
        <member name="T:ProtoCore.CallSite.SingleRunTraceData">
            <summary>
            Data structure used to carry trace data
            </summary>
        </member>
        <member name="P:ProtoCore.CallSite.SingleRunTraceData.IsEmpty">
            <summary>
            Does this struct contain any trace data
            </summary>
        </member>
        <member name="P:ProtoCore.CallSite.SingleRunTraceData.HasAnyNestedData">
            <summary>
            Is there any data anywhere in this run data, or is it all
            empty structure
            </summary>
        </member>
        <member name="M:ProtoCore.CallSite.SingleRunTraceData.GetLeftMostData">
            <summary>
            This gets the zero-most, left most index
            null if no data
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProtoCore.CallSite.MethodName">
            <summary>
            The method group name that is associated with this function
            </summary>
        </member>
        <member name="M:ProtoCore.CallSite.#ctor(System.Int32,System.String,ProtoCore.Lang.FunctionTable,ProtoCore.ExecutionMode,System.String)">
            <summary>
            Constructs an instance of the CallSite object given its scope and 
            method information. This constructor optionally takes in a preloaded
            trace data information.
            </summary>
            <param name="classScope"></param>
            <param name="methodName"></param>
            <param name="globalFunctionTable"></param>
            <param name="execMode"></param>
            <param name="serializedTraceData">An optional Base64 encoded string
            representing the trace data that the callsite could use as part of 
            its re-construction.</param>
            
        </member>
        <member name="M:ProtoCore.CallSite.LoadSerializedDataIntoTraceCache(System.String)">
            <summary>
            Load the serialized data provided into this callsite's trace cache
            </summary>
            <param name="serializedTraceData">The data to load</param>
        </member>
        <member name="M:ProtoCore.CallSite.WillCallReplicate(ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{System.Collections.Generic.List{ProtoCore.ReplicationGuide}},ProtoCore.DSASM.StackFrame,ProtoCore.RuntimeCore,System.Collections.Generic.List{System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction}}@)">
            <summary>
            Conservative guess as to whether this call will replicate or not
            This may give inaccurate answers if the node cluster doesn't actually exist
            </summary>
            <param name="context"></param>
            <param name="arguments"></param>
            <param name="partialReplicationGuides"></param>
            <param name="stackFrame"></param>
            <param name="runtimeCore"></param>
            <param name="replicationTrials"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CallSite.GetTraceDataToSave">
            <summary>
            Call this method to obtain the Base64 encoded string that 
            represents this callsite instance's trace data
            </summary>
            <returns>Returns the Base64 encoded string that represents the
            trace data of this callsite
            </returns>
            
        </member>
        <member name="M:ProtoCore.CallSite.CompressSerializedTraceData(System.String)">
            <summary>
            Compress the input string via GZIP to Base64String
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CallSite.GetOrphanedSerializables">
            <summary>
            Returns all serializables that were created historically, but
            were not re-created in the most recent graph update.
            </summary>
        </member>
        <member name="M:ProtoCore.CallSite.ReportFunctionGroupNotFound(ProtoCore.RuntimeCore,System.Collections.Generic.List{ProtoCore.DSASM.StackValue})">
            <summary>
            Report that whole function group couldn't be found
            </summary>
            <param name="runtimeCore"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CallSite.ReportMethodNotFoundForArguments(ProtoCore.RuntimeCore,ProtoCore.FunctionGroup,System.Collections.Generic.List{ProtoCore.DSASM.StackValue})">
            <summary>
            Internal support method for reporting a method that can't be located
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CallSite.ArgumentSanityCheck(System.Collections.Generic.List{ProtoCore.DSASM.StackValue})">
            <summary>
            Minimal sanity check of arugments
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:ProtoCore.CallSite.UpdateCallsiteExecutionState(System.Object,ProtoCore.RuntimeCore)">
            <summary>
             This function handles generating a unique callsite ID and serializing the data associated with this callsite
            </summary>
            <param name="callsiteData"></param>
            <param name="runtimeCore"></param>
        </member>
        <member name="M:ProtoCore.CallSite.IsSimilarOptionButOfHigherRank(System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction})">
            <summary>
            This helper function checks if the current replication option is
            similar to the previous option but of a higher rank. 
            Checks if the first entry is same in both the options and the current options count is more. 
            </summary>
            <returns>Returns true or false based on the condition described above. 
            </returns>
        </member>
        <member name="M:ProtoCore.CallSite.GetCompleteMatchFunctionEndPoint(ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.FunctionGroup,System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.DSASM.StackFrame,ProtoCore.RuntimeCore)">
            <summary>
            Returns complete match attempts to locate a function endpoint where 1 FEP matches all of the requirements for dispatch
            </summary>
        </member>
        <member name="M:ProtoCore.CallSite.GetFuncGroup(ProtoCore.RuntimeCore,System.Collections.Generic.List{ProtoCore.DSASM.StackValue})">
            <summary>
            Returns the function group associated with this callsite
            </summary>
        </member>
        <member name="M:ProtoCore.CallSite.ExecWithRISlowPath(System.Collections.Generic.List{ProtoCore.FunctionEndPoint},ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.DSASM.StackFrame,ProtoCore.RuntimeCore,ProtoCore.CallSite.SingleRunTraceData,ProtoCore.CallSite.SingleRunTraceData,ProtoCore.FunctionEndPoint)">
            <summary>
            Execute an arbitrary depth replication using the full slow path algorithm
            </summary>
            <param name="functionEndPoints"></param>
            <param name="c"></param>
            <param name="formalParameters"></param>
            <param name="replicationInstructions"></param>
            <param name="stackFrame"></param>
            <param name="runtimeCore"></param>
            <param name="previousTraceData"></param>
            <param name="newTraceData"></param>
            <param name="finalFunctionEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CallSite.ExecWithZeroRI(System.Collections.Generic.List{ProtoCore.FunctionEndPoint},ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.DSASM.StackFrame,ProtoCore.RuntimeCore,ProtoCore.CallSite.SingleRunTraceData,ProtoCore.CallSite.SingleRunTraceData,ProtoCore.FunctionEndPoint)">
            <summary>
            Dispatch without replication
            </summary>
        </member>
        <member name="M:ProtoCore.CallSite.PerformRepGuideDemotion(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{System.Collections.Generic.List{ProtoCore.ReplicationGuide}},ProtoCore.RuntimeCore)">
            <summary>
            If all the arguments that have rep guides are single values, then strip the rep guides
            </summary>
            <param name="arguments"></param>
            <param name="providedReplicationGuides"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.CallSite.GetAllSerializablesFromSingleRunTraceData(ProtoCore.CallSite.RawTraceData)">
            <summary>
            Returns a flat collection of strings from a serialized representation of a SingleRunTraceData object.
            </summary>
            <param name="callSiteData">The serialized representation of a SingleRunTraceData object.</param>
            <returns>A flat collection of strings.</returns>
        </member>
        <member name="M:ProtoCore.FunctionEndPoint.ComputeTypeDistance(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.DSASM.ClassTable,ProtoCore.RuntimeCore,System.Boolean)">
            <summary>
            Compute the number of type transforms needed to turn the current type into the target type
            Note that this method returns int[] -> char[] as an exact match
            </summary>
            <param name="args"></param>
            <param name="classTable"></param>
            <param name="runtimeCore"></param>
            <param name="allowArrayPromotion"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.FunctionEndPoint.CoerceParameters(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.RuntimeCore)">
            <summary>
            Convert the parameters passed to the types specified in this fep
            </summary>
            <param name="formalParameters"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.FunctionGroup">
            <summary>
            A function group is a collection of overloads to the same method
            </summary>
        </member>
        <member name="M:ProtoCore.FunctionGroup.CanGetExactMatchStatics(ProtoCore.Runtime.Context,System.Collections.Generic.List{System.Collections.Generic.List{ProtoCore.DSASM.StackValue}},ProtoCore.DSASM.StackFrame,ProtoCore.RuntimeCore,System.Collections.Generic.HashSet{ProtoCore.FunctionEndPoint}@)">
            <summary>
            For a given list of formal parameters, get the function end points that resolve
            </summary>
            <param name="context"></param>
            <param name="reducedFormalParams"></param>
            <param name="stackFrame"></param>
            <param name="runtimeCore"></param>
            <param name="lookup">The number of argument sets that couldn't be resolved</param>
            <returns>Returns true, if it can find a matching FEP for all the reduced params. Returns False otherwise.</returns>
        </member>
        <member name="M:ProtoCore.FunctionGroup.GetExactTypeMatches(ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.DSASM.StackFrame,ProtoCore.RuntimeCore)">
            <summary>
            Returns a list of all the function end points that are type compliant, there maybe more than one due to pattern matches
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.FunctionGroup.GetConversionDistances(ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.DSASM.ClassTable,ProtoCore.RuntimeCore,System.Boolean)">
            <summary>
            Returns a dictionary of the function end points that are type compatible
            with the costs of the associated conversions
            </summary>
            <param name="context"></param>
            <param name="formalParams"></param>
            <param name="replicationInstructions"></param>
            <param name="classTable"></param>
            <param name="runtimeCore"></param>
            <param name="allowArrayPromotion"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.FunctionGroup.GetLooseConversionDistances(ProtoCore.Runtime.Context,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},System.Collections.Generic.List{ProtoCore.Lang.Replication.ReplicationInstruction},ProtoCore.DSASM.ClassTable,ProtoCore.RuntimeCore)">
            <summary>
            Returns a dictionary of the function end points that are type compatible
            with any branch of replicated parameters. 
            </summary>
            <param name="context"></param>
            <param name="formalParams"></param>
            <param name="replicationInstructions"></param>
            <param name="classTable"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.InternalAttributes">
            <summary>
            These are DS defined class attributes 
            These attributes are used internally by the compiler
            </summary>
        </member>
        <member name="M:ProtoCore.Type.#ctor(System.String,System.Int32)">
            <summary>
            Constructor of Type using Short string
            </summary>
            <param name="TypeName"> Serialized Short String</param>
            <param name="TypeRank"></param>
        </member>
        <member name="M:ProtoCore.Type.Initialize">
            <summary>
            Comment Jun: Initialize a type to the default values
            </summary>
        </member>
        <member name="M:ProtoCore.Type.ToShortString">
            <summary>
            To its string representation, but using unqualified class class name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.MigrationRewriter.MigrateMethodNames(System.Collections.Generic.IEnumerable{ProtoCore.AST.Node},System.Collections.Generic.IDictionary{System.String,System.String},ProtoCore.MigrationRewriter.LogWarningHandler)">
            <summary>
            Migrates old method names to new names based on priorNameHints from LibraryServices
            </summary>
            <param name="astNodes"></param>
            <param name="priorNames">dictionary of old names vs. new names for node migration</param>
            <param name="logWarningHandler"></param>
            <returns>migrated AST nodes after method renaming</returns>
        </member>
        <member name="T:ProtoCore.Namespace.ElementResolver">
            <summary>
            Responsible for resolving a partial class name to its fully resolved name
            </summary>
        </member>
        <member name="P:ProtoCore.Namespace.ElementResolver.ResolutionMap">
            <summary>
            Maintains a lookup table of partial class identifiers vs. 
            fully qualified class identifier names and assembly name
            </summary>
        </member>
        <member name="M:ProtoCore.Namespace.ElementResolver.LookupResolvedName(System.String)">
            <summary>
            Looks up resolved name in resolution map given the partial name
            </summary>
            <param name="partialName"></param>
            <returns> returns null if partial name is not found in resolution map </returns>
        </member>
        <member name="M:ProtoCore.Namespace.ElementRewriter.RewriteElementNames(ProtoCore.DSASM.ClassTable,ProtoCore.Namespace.ElementResolver,System.Collections.Generic.IEnumerable{ProtoCore.AST.Node},ProtoCore.Namespace.ElementRewriter.SymbolConflictWarningHandler)">
            <summary>
            Lookup namespace resolution map to substitute 
            partial classnames with their fully qualified names in ASTs.
            If partial class is not found in map, 
            update ResolutionMap with fully resolved name from compiler.
            </summary>
            <param name="classTable"></param>
            <param name="elementResolver"></param>
            <param name="astNodes"> parent AST node </param>
            <param name="handler"></param>
        </member>
        <member name="M:ProtoCore.Namespace.PermuteUtils.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns an enumeration of enumerators, one for each permutation of the input.
            E.g. given an input array: {A, B, C, D, E}, and count of 2, 
            this returns the following permutations in the same order:
            { AB, AC, AD, AE, BC, BD, BE, CD, CE, DE }
            </summary>
            <typeparam name="T">type of input collection member</typeparam>
            <param name="list">input collection to choose permutations from</param>
            <param name="count">Number of items to return permutations of</param>
            <returns>All possible permuatations of the input list picking (count) items at a time</returns>
        </member>
        <member name="M:ProtoCore.Namespace.PermuteUtils.AllButLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Given a generic enumerable collection of items,
            returns all but the last item in the collection
            </summary>
            <typeparam name="T">Type of member in collection</typeparam>
            <param name="source">input collection</param>
            <returns>new collection of all except the last item in the input collection</returns>
        </member>
        <member name="T:ProtoCore.Namespace.Symbol">
            <summary>
            Symbol class : It represents a symbol with namespace.
            </summary>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.#ctor(System.String)">
            <summary>
            Constructs a FullyQualifiedSymbolName with the given fullname.
            </summary>
            <param name="fullname">fullname for the symbol including namespaces.
            </param>
        </member>
        <member name="P:ProtoCore.Namespace.Symbol.FullName">
            <summary>
            Returns fully qualified symbol name.
            </summary>
        </member>
        <member name="P:ProtoCore.Namespace.Symbol.Name">
            <summary>
            Returns symbol name
            </summary>
        </member>
        <member name="P:ProtoCore.Namespace.Symbol.Id">
            <summary>
            Returns symbol id
            </summary>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.Matches(System.String)">
            <summary>
            Checks if all of the namespace prefixes specified in the given 
            partially qualified name appear in this namespace in the same order.
            For Example:
            A full namespace "Com.Autodesk.Designscript.ProtoGeometry.Point" 
            will match all of the following partial namespaces
            Com.Autodesk.Designscript.ProtoGeometry.Point
            Point
            DesignScript.Point
            ProtoGeometry.Point
            Autodesk.DesignScript.Point
            whereas it won't match Com.DesignScript.Autodesk.Point
            </summary>
            <param name="partialname">Partially qualified symbol name</param>
            <returns>returns true if partial name matches this</returns>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.GetShortestUniqueNames(System.Collections.Generic.IEnumerable{ProtoCore.Namespace.Symbol})">
            <summary>
            Given a list of conflicting namespaces, finds the shortest partial name for a namespace
            that can be resolved uniquely. For example, given {"A.B.C.D.E", "X.Y.A.B.E.C.E", "X.Y.A.C.B.E"},
            all with the same class E, their shortest unique names would be: {"D.E", "E.E", "C.B.E"}
            </summary>                                               
            <param name="symbolList">Input list of conflicting namespaces (having same class name)</param>
            <returns>Map of Symbol vs. short name</returns>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.Equals(System.Object)">
            <summary>
            Checks equality based on FullName
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.op_Equality(ProtoCore.Namespace.Symbol,ProtoCore.Namespace.Symbol)">
            <summary>
            Equality operator overload to have same equality behaviour as object.Equals() override
            </summary>
            <param name="thisSymbol"></param>
            <param name="otherSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.op_Inequality(ProtoCore.Namespace.Symbol,ProtoCore.Namespace.Symbol)">
            <summary>
            Inequality operator overload is needed for every equality operator overload
            </summary>
            <param name="thisSymbol"></param>
            <param name="otherSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Namespace.Symbol.GetHashCode">
            <summary>
            Returns hascode based on FullName
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.Namespace.SymbolTable">
            <summary>
            SymbolTable class
            </summary>
        </member>
        <member name="F:ProtoCore.Namespace.SymbolTable.symbolTable">
            <summary>
            Table for all symbols
            </summary>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.#ctor(ProtoCore.Namespace.SymbolTable)">
            <summary>
            Copy Constructor
            </summary>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.AddSymbol(System.String)">
            <summary>
            Adds the given symbol to this symbol table
            </summary>
            <param name="fullname">Fully qualified name for the symbol</param>
            <returns>The newly added symbol if added successfully, else null.</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.AddSymbol(ProtoCore.Namespace.Symbol)">
            <summary>
            Adds the given symbol to this symbol table
            </summary>
            <param name="qualifiedSymbol">FullyQualifiedSymbolName</param>
            <returns>True if symbol is added successfully, false if the symbol was 
            already present in the table.</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.GetMatchingSymbols(System.String)">
            <summary>
            Returns all matching symbols for the given partially qualified symbol.
            </summary>
            <param name="partialName">Partially qualified symbol</param>
            <returns>An array of all matched symbols</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.GetFullyQualifiedName(System.String)">
            <summary>
            Returns fully qualified name for the given partial name if it 
            resolves to a unique symbol.
            </summary>
            <param name="partialName">partial symbol name</param>
            <returns>Fully qualified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.TryGetExactSymbol(System.String,ProtoCore.Namespace.Symbol@)">
            <summary>
            Finds a symbol in this table which has exactly same name as given 
            fully qualified name.
            </summary>
            <param name="fullName">Fully qualified name for lookup</param>
            <param name="symbol">Matching symbol for given fullName.</param>
            <returns>True if exact matching symbol is found.</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.TryGetUniqueSymbol(System.String,ProtoCore.Namespace.Symbol@)">
            <summary>
            Finds a unique matching symbol for the given partial name.
            </summary>
            <param name="partialName">Partial symbol name for lookup</param>
            <param name="symbol">Matching symbol or null</param>
            <returns>True if only one unique symbol could be found with given
            partial name.</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.GetSymbolCount">
            <summary>
            Returns total symbol count in the table
            </summary>
            <returns>Symbol count</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.TryGetSymbols(System.String,System.Func{ProtoCore.Namespace.Symbol,System.Boolean})">
            <summary>
            Returns all symbols for the given name that satisfies the input predicate
            </summary>
            <param name="name">symbol name for lookup</param>
            <param name="predicate">predicate for lookup</param>
            <returns>Array of matching symbols or empty array</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.GetAllSymbolNames">
            <summary>
            Returns collection of names without namespace for all symbols in
            this table.
            </summary>
            <returns>Collection of symbol names</returns>
        </member>
        <member name="M:ProtoCore.Namespace.SymbolTable.GetAllSymbols(System.String)">
            <summary>
            Returns set of all symbols in this table for the given symbol name
            </summary>
            <param name="symbolName">Symbol name</param>
            <returns>HashSet of Symbol</returns>
        </member>
        <member name="P:ProtoCore.AST.AssociativeAST.MethodAttributes.Description">
            <summary>
            Returns/Sets description for the method.
            </summary>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.BinaryExpressionNode.#ctor(ProtoCore.AST.AssociativeAST.IdentifierNode,ProtoCore.AST.AssociativeAST.AssociativeNode)">
            <summary>
            Create a Binary assignment node from a given lhs identifier and given right node
            with line and col properties of rhs node
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.BuildIntNode(System.Int32)">
            <summary>
            Build a DesignScript Int AST node from a 32 bit int input value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.BuildIntNode(System.Int64)">
            <summary>
            Build a DesignScript Int AST node from a long input value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.GetDefault(System.Type)">
            <summary>
            Get the default value of Type "t"
            </summary>
            <param name="t">The type that we want to generate a default value for</param>
            <returns>The default value</returns>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.BuildPrimitiveNodeFromObjectAndType(System.Object,System.Type)">
            <summary>
            Builds an AssociativeNode (int, double, null etc) from the input value or type
            </summary>
            <param name="value">The value of the object</param>
            <param name="type">The target type that the "value" parameter represents</param>
            <returns>AssociativeNode</returns>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.BuildPrimitiveNodeFromObject(System.Object)">
            <summary>   
            Builds a integer, double, string, boolean or null node depending
            on input value type.
            </summary>
            <param name="value">Input value</param>
            <returns>AssociativeNode</returns>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.AddReplicationGuide(ProtoCore.AST.AssociativeAST.AssociativeNode,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Create a copy of the node with replication guide added. 
            </summary>
            <param name="node">Associative AST node.</param>
            <param name="guides">Replication guide.</param>
            <param name="isLongest">If use the Longest replication strategy.</param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AST.AssociativeAST.AstFactory.AddAtLevel(ProtoCore.AST.AssociativeAST.AssociativeNode,System.Int32,System.Boolean)">
            <summary>
            Create a copy of node with at-level. E.g., xs@-2
            </summary>
            <param name="node"></param>
            <param name="level"></param>
            <param name="shouldKeepListStructure"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.AST.Node.InheritID(System.Int32)">
            <summary>
            An explicit mechanism to manually set the ID of an AST node
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ProtoCore.AST.DictionaryExpressionBuilderBase`1">
            <summary>
            Dictionary syntax like { "foo" : 12 } isn't part of the AST. Instead, this helper class exists to 
            build a function call to build a Dictionary via zero touch.
            </summary>
        </member>
        <member name="T:ProtoCore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.add_expected">
            <summary>
              Looks up a localized string similar to &quot;+&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.addadd_expected">
            <summary>
              Looks up a localized string similar to &quot;++&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.AlgorithmNotSupported">
            <summary>
              Looks up a localized string similar to Selected algorithm not supported.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.and_expected">
            <summary>
              Looks up a localized string similar to &quot;&amp;&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.andand_expected">
            <summary>
              Looks up a localized string similar to &quot;&amp;&amp;&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ArgumentNullException">
             <summary>
               Looks up a localized string similar to Value cannot be null.
            Parameter name: {0} href-ArgumentNullException.html.
             </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ArrayWithNotSupported">
            <summary>
              Looks up a localized string similar to Array with no common superclass not yet supported: {0}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.asterisk_expected">
            <summary>
              Looks up a localized string similar to &quot;*&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.AttributeArgMustBeConstant">
            <summary>
              Looks up a localized string similar to An attribute argument must be a constant expression.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.BaseIsExpectedToCallBaseConstructor">
            <summary>
              Looks up a localized string similar to The keyword &apos;base&apos; is expected here to call the base class constructor.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.catch_expected">
            <summary>
              Looks up a localized string similar to &quot;catch&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.char_expected">
            <summary>
              Looks up a localized string similar to char expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.CheckIfTheElementsInListAreSameType">
            <summary>
              Looks up a localized string similar to Checks if all the elements in the specified list are of the same type.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ChecksIfLengthsAreSameInMultiDimentionalList">
            <summary>
              Looks up a localized string similar to Checks if each of rows in multidimensional list has the same number of elements .
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ChecksIfListContainsTheElement">
            <summary>
              Looks up a localized string similar to Checks if the specified element is present in the specified list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ChecksIfTheListIsAllFalse">
            <summary>
              Looks up a localized string similar to Checks if all elements in the specified list are false.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ChecksIfTheListIsAllTrue">
            <summary>
              Looks up a localized string similar to Checks if all elements in the specified list are true.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ChecksListWithUniformDepth">
            <summary>
              Looks up a localized string similar to Checks if the list has a uniform depth.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ClassDeclarationNotSupported">
            <summary>
              Looks up a localized string similar to Class declarations are not supported in CodeBlock Nodes, only function definitions and assignment statements.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.closebrace_expected">
            <summary>
              Looks up a localized string similar to &quot;}&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.closebracket_expected">
            <summary>
              Looks up a localized string similar to closebracket expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.CloseBracketExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; expected - Incomplete Closure.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.closeparen_expected">
            <summary>
              Looks up a localized string similar to closeparen expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.comma_expected">
            <summary>
              Looks up a localized string similar to &quot;,&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ContainsKeys">
            <summary>
              Looks up a localized string similar to Checks if the specified key is present in the specified key-value pair list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.curvedash_expected">
            <summary>
              Looks up a localized string similar to &quot;~\&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.dashdash_expected">
            <summary>
              Looks up a localized string similar to &quot;--&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.DeprecatedListInitializationSyntax">
            <summary>
              Looks up a localized string similar to Curly braces are no longer used for list creation. Use square brackets instead, like [] or [1,2,3]..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.DeterminesObjectsAreEqual">
            <summary>
              Looks up a localized string similar to Determines whether two object instances are equal.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.divider_expected">
            <summary>
              Looks up a localized string similar to &quot;/&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.doublecolumn_expected">
            <summary>
              Looks up a localized string similar to &quot;:&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.EmptyCharacterLiteral">
            <summary>
              Looks up a localized string similar to Empty character literal.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.endline_expected">
            <summary>
              Looks up a localized string similar to endline expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.EOF_expected">
            <summary>
              Looks up a localized string similar to EOF expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.equal_expected">
            <summary>
              Looks up a localized string similar to equal expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.equalmark_expected">
            <summary>
              Looks up a localized string similar to &quot;=&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.equalright_expected">
            <summary>
              Looks up a localized string similar to &quot;=&gt;&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.error">
            <summary>
              Looks up a localized string similar to error.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FailedToCastFromNull">
            <summary>
              Looks up a localized string similar to Null value cannot be cast to {0} href=FailedToCastFromNull.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FailedToConvertArrayToDictionary">
            <summary>
              Looks up a localized string similar to Cannot convert List to Dictionary type..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FailedToImport">
            <summary>
              Looks up a localized string similar to Failed to import {0}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FailedToResolveSortingFunction">
            <summary>
              Looks up a localized string similar to Failed to resolve the comparison function for sorting, expected def sorter : int(x,y).
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.float_expected">
            <summary>
              Looks up a localized string similar to float expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FunctionCallCannotBeAtLeftSide">
            <summary>
              Looks up a localized string similar to A function call is not allowed on the left hand side of an assignment.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FunctionDispatchFailed">
            <summary>
              Looks up a localized string similar to Function dispatch could not be completed {0}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FunctionGroupNotFound">
            <summary>
              Looks up a localized string similar to No function called {0} on a {1} could be found.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.FunctionGroupWithParameterNotFound">
            <summary>
              Looks up a localized string similar to No function called {0} on a {1} that takes {2} could be found.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.GetKeys">
            <summary>
              Looks up a localized string similar to Gets all keys from the specified key-value pair list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.Gettypes">
            <summary>
              Looks up a localized string similar to Gets the Type of the current instance.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.GetValues">
            <summary>
              Looks up a localized string similar to Gets all values stored in the specified key-value pair list and for a simple list it returns all elements in the list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.greaterequal_expected">
            <summary>
              Looks up a localized string similar to greaterequal expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.greaterthan_expected">
            <summary>
              Looks up a localized string similar to greaterthan expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.hax_expected">
            <summary>
              Looks up a localized string similar to &quot;#&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ident_expected">
            <summary>
              Looks up a localized string similar to ident expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ImportFileByGivenFilePath">
            <summary>
              Looks up a localized string similar to Imports data from a text file containing comma separated values into two-dimensional list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ImportFileByGivenFilePathWithMode">
            <summary>
              Looks up a localized string similar to Imports data from a text file containing comma separated values into two-dimensional list and also transpose the output list if specified.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ImportStatementNotSupported">
            <summary>
              Looks up a localized string similar to Imports statements are not supported in CodeBlock Nodes, please use the Library UI instead.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.in_expected">
            <summary>
              Looks up a localized string similar to &quot;in&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.IndexIntoNonArrayObject">
            <summary>
              Looks up a localized string similar to No item exists at specified index address.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.InsertsAnElementIntoList">
            <summary>
              Looks up a localized string similar to Inserts an element into a list at specified index.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.IntegerOverflow">
            <summary>
              Looks up a localized string similar to The operation resulted in an integer overflow. Its result may be unexpected..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_AccessSpecifier">
            <summary>
              Looks up a localized string similar to invalid Associative_AccessSpecifier.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_AddOp">
            <summary>
              Looks up a localized string similar to invalid_Associative_AddOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_BinaryOps">
            <summary>
              Looks up a localized string similar to invalid Associative_BinaryOps.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_BitOp">
            <summary>
              Looks up a localized string similar to invalid Associative_BitOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_classdecl">
            <summary>
              Looks up a localized string similar to invalid Associative_classdecl.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_ComparisonOp">
            <summary>
              Looks up a localized string similar to invalid Associative_ComparisonOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_DecoratedIdentifier">
            <summary>
              Looks up a localized string similar to invalid Associative_DecoratedIdentifier.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_Factor">
            <summary>
              Looks up a localized string similar to invalid Associative_Factor.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_FunctionalStatement">
            <summary>
              Looks up a localized string similar to invalid Associative_FunctionalStatement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_functiondecl">
            <summary>
              Looks up a localized string similar to invalid Associative_functiondecl.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_LanguageBlock">
            <summary>
              Looks up a localized string similar to invalid Associative_LanguageBlock.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_Level">
            <summary>
              Looks up a localized string similar to Invalid list@level syntax, consider using @L1 for level 1..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_LogicalOp">
            <summary>
              Looks up a localized string similar to invalid Associative_LogicalOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_MulOp">
            <summary>
              Looks up a localized string similar to invalid Associative_MulOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_NameReference">
            <summary>
              Looks up a localized string similar to invalid Associative_NameReference.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_negop">
            <summary>
              Looks up a localized string similar to invalid Associative_negop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_Number">
            <summary>
              Looks up a localized string similar to invalid Associative_Number.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_PostFixOp">
            <summary>
              Looks up a localized string similar to invalid Associative_PostFixOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_Statement">
            <summary>
              Looks up a localized string similar to invalid Associative_Statement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_UnaryExpression">
            <summary>
              Looks up a localized string similar to invalid Associative_UnaryExpression.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Associative_unaryop">
            <summary>
              Looks up a localized string similar to invalid Associative_unaryop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Hydrogen">
            <summary>
              Looks up a localized string similar to invalid Hydrogen.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_addop">
            <summary>
              Looks up a localized string similar to invalid Imperative_addop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_assignstmt">
            <summary>
              Looks up a localized string similar to invalid Imperative_assignstmt.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_bitop">
            <summary>
              Looks up a localized string similar to invalid Imperative_bitop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_decoratedIdentifier">
            <summary>
              Looks up a localized string similar to invalid Imperative_decoratedIdentifier.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_factor">
            <summary>
              Looks up a localized string similar to invalid Imperative_factor.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_forloop">
            <summary>
              Looks up a localized string similar to invalid Imperative_forloop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_functiondecl">
            <summary>
              Looks up a localized string similar to invalid Imperative_functiondecl.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_ifstmt">
            <summary>
              Looks up a localized string similar to invalid Imperative_ifstmt.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_languageblock">
            <summary>
              Looks up a localized string similar to invalid Imperative_languageblock.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_logicalop">
            <summary>
              Looks up a localized string similar to invalid Imperative_logicalop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_mulop">
            <summary>
              Looks up a localized string similar to invalid Imperative_mulop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_NameReference">
            <summary>
              Looks up a localized string similar to invalid Imperative_NameReference.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_num">
            <summary>
              Looks up a localized string similar to invalid Imperative_num.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_PostFixOp">
            <summary>
              Looks up a localized string similar to invalid Imperative_PostFixOp.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_relop">
            <summary>
              Looks up a localized string similar to invalid Imperative_relop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_stmt">
            <summary>
              Looks up a localized string similar to invalid Imperative_stmt.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_unaryexpr">
            <summary>
              Looks up a localized string similar to invalid Imperative_unaryexpr.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Imperative_unaryop">
            <summary>
              Looks up a localized string similar to invalid Imperative_unaryop.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.invalid_Import_Statement">
            <summary>
              Looks up a localized string similar to invalid Import_Statement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.InvalidArrayIndexType">
            <summary>
              Looks up a localized string similar to List indices must be numeric. href=InvalidArrayIndexType.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.InvalidFunction">
            <summary>
              Looks up a localized string similar to Not an valid function..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.InvalidLanguageBlockIdentifier">
            <summary>
              Looks up a localized string similar to \&quot;{0}\&quot; is not a valid language block identifier, do you mean \&quot;Associative\&quot; or \&quot;Imperative\&quot;?.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.InvalidSymbol">
            <summary>
              Looks up a localized string similar to Syntax Error: invalid symbol &apos;{0}&apos;. (Did you mean to use Modifier Stack \&quot; =&gt; \&quot;).
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kAlreadyImported">
            <summary>
              Looks up a localized string similar to File : &apos;{0}&apos; is already imported.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kAmbigousMethodDispatch">
            <summary>
              Looks up a localized string similar to Internal error, please report: Function could not be found on final dispatch..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kArgumentTypeUndefined">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; of argument &apos;{1}&apos; is not defined.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kArrayOverIndexed">
            <summary>
              Looks up a localized string similar to The index is outside the given range href=kArrayOverIndexed.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kArrayRankReduction">
            <summary>
              Looks up a localized string similar to Type conversion would cause array rank reduction. This is not permitted outside of replication. {511ED65F-FB66-4709-BDDA-DCD5E053B87F}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kAssignNonCharacterToString">
            <summary>
              Looks up a localized string similar to A string must be made up of characters.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kAssingToThis">
            <summary>
              Looks up a localized string similar to &apos;this&apos; is readonly and cannot be assigned to.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kCallingConstructorInConstructor">
            <summary>
              Looks up a localized string similar to Cannot call the constructor &apos;{0}()&apos; inside itself.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.KCallingConstructorOnInstance">
            <summary>
              Looks up a localized string similar to Cannot call the constructor &apos;{0}()&apos; on an existing object.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kCallingNonStaticMethod">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}()&apos; is not a static method.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kCallingNonStaticProperty">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; is not a static property.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kConsoleWarningMessage">
            <summary>
              Looks up a localized string similar to &gt; Runtime warning: {0}\n - \&quot;{1}\&quot; &lt;line: {2}, col: {3}&gt;.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kConvertArrayToNonArray">
            <summary>
              Looks up a localized string similar to Converting an array to {0} would cause array rank reduction and is not permitted href=kConvertArrayToNonArray.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kConvertDoubleToInt">
            <summary>
              Looks up a localized string similar to Converting a double to an int may lose information. href=testing.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kConvertNonConvertibleTypes">
            <summary>
              Looks up a localized string similar to Asked to convert non-convertible types.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kCyclicDependency">
            <summary>
              Looks up a localized string similar to A cyclic dependency exists between two variables href=kCyclicDependency.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kDereferencingNonPointer">
            <summary>
              Looks up a localized string similar to Internal error, please report: Dereferencing a non-pointer. href=DereferencingNonPointer.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kExceptionTypeUndefined">
            <summary>
              Looks up a localized string similar to The exception type &apos;{0}&apos; is not defined.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.keywordCannotBeUsedAsConstructorName">
            <summary>
              Looks up a localized string similar to \&quot;{0}\&quot; is a keyword, it can&apos;t be used as constructor name.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.keywordCantBeUsedAsIdentifier">
            <summary>
              Looks up a localized string similar to \&quot;{0}\&quot; is a keyword, but an identifier was expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFailToConverToFunction">
            <summary>
              Looks up a localized string similar to Converting objects to a function pointer is not allowed.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFailToConverToNull">
            <summary>
              Looks up a localized string similar to Converting other things to null is not allowed.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFailToConverToPointer">
            <summary>
              Looks up a localized string similar to Cannot convert objects to function pointers.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFFIFailedToObtainObject">
            <summary>
              Looks up a localized string similar to Failed to obtain object &apos;{0}&apos; for &apos;{1}.{2}&apos;.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFFIFailedToObtainThisObject">
            <summary>
              Looks up a localized string similar to Failed to obtain this object for &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFFIInvalidCast">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is being cast to &apos;{1}&apos;, but the allowed range is [{2}..{3}].
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFileNotFound">
            <summary>
              Looks up a localized string similar to File : &apos;{0}&apos; not found.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFunctionNotFound">
            <summary>
              Looks up a localized string similar to No candidate function could be found.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kFunctionNotReturnAtAllCodePaths">
            <summary>
              Looks up a localized string similar to All paths through the method &apos;{0}()&apos; must return a value.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index is out of range href=kIndexOutOfRange.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidAmountInRangeExpression">
            <summary>
              Looks up a localized string similar to The amount in range expression should be an positive integer.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidArguments">
            <summary>
              Looks up a localized string similar to Argument is invalid.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidArgumentsInRangeExpression">
            <summary>
              Looks up a localized string similar to The value used in a range expression must be a number or a letter.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidBreakForFunction">
            <summary>
              Looks up a localized string similar to Internal error, please report: Statement break causes function to abnormally return null..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidContinueForFunction">
            <summary>
              Looks up a localized string similar to Internal error, please report: Statement continue cause function to abnormally return null..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidListLevelName">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be used as list level name, consider using L1 for level 1..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidStaticCyclicDependency">
            <summary>
              Looks up a localized string similar to A cyclic dependency exists between two variables.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidStringArgumentInRangeExpression">
            <summary>
              Looks up a localized string similar to Start value can be just number or single letter.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidThis">
            <summary>
              Looks up a localized string similar to &apos;this&apos; can only be used in methods that are members of a class.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidType">
            <summary>
              Looks up a localized string similar to The type is invalid.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvalidUnicodeArgumentInRangeExpression">
            <summary>
              Looks up a localized string similar to Range and Sequence expressions support only ASCII characters.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kInvokeMethodOnInvalidObject">
            <summary>
              Looks up a localized string similar to Method &apos;{0}()&apos; is invoked on an invalid object..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodAlreadyDefined">
            <summary>
              Looks up a localized string similar to Method &apos;{0}()&apos; is already defined.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodDeprecated">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has been deprecated, please use method &apos;{1}&apos; instead href=Deprecated.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodHasInvalidArguments">
            <summary>
              Looks up a localized string similar to &apos;{0}()&apos; has some invalid arguments href=kMethodHasInvalidArguments.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodIsInaccessible">
            <summary>
              Looks up a localized string similar to Method &apos;{0}()&apos; can&apos;t be reached from here.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}()&apos; not found href=kMethodNotFound.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodResolutionFailure">
            <summary>
              Looks up a localized string similar to Internal error, please report: Method resolution failure on: {0}().
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodResolutionFailureForOperator">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to operands of type &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>
              Looks up a localized string similar to There is no version of {0} that accepts argument type(s) ({1}). href=NonOverloadMethodResolutionError.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMethodStackOverflow">
            <summary>
              Looks up a localized string similar to &apos;{0}()&apos; recursed until Dynamo ran out of memory, please add a base case..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMultipleSymbolFound">
            <summary>
              Looks up a localized string similar to Multiple definitions for &apos;{0}&apos; are found as {1} href=kMultipleSymbolFound.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kMultipleSymbolFoundFromName">
            <summary>
              Looks up a localized string similar to Multiple definitions for &apos;{0}&apos; are found as {1}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kNoStepSizeInAmountRangeExpression">
            <summary>
              Looks up a localized string similar to No step size is specified in amount range expression.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kPropertyInaccessible">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is inaccessible.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kPropertyIsInaccessible">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is inaccessible.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kPropertyNotFound">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; not found.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kPropertyOfClassNotFound">
            <summary>
              Looks up a localized string similar to No property called {0} on {1} could be found href=kPropertyOfClassNotFound.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kRangeExpressionConflictOperator">
            <summary>
              Looks up a localized string similar to An amount operator cannot be used together with a step operator.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kRangeExpressionWithInvalidAmount">
            <summary>
              Looks up a localized string similar to The amount of step is invalid..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kRangeExpressionWithInvalidStepSize">
            <summary>
              Looks up a localized string similar to The step size of range expression is invalid..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kRangeExpressionWithNegativeStepNumber">
            <summary>
              Looks up a localized string similar to The step number of range expression should be greater than 0.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kRangeExpressionWithNonIntegerStepNumber">
            <summary>
              Looks up a localized string similar to The step number of range expression should be integer.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kRangeExpressionWithStepSizeZero">
            <summary>
              Looks up a localized string similar to The step size of range expression should not be 0.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kReturnTypeUndefined">
            <summary>
              Looks up a localized string similar to Return type &apos;{0}&apos; of method &apos;{1}()&apos; is not defined.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kStaticMethodNotFound">
            <summary>
              Looks up a localized string similar to Cannot find static method or constructor {0}.{1}().
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kStringIndexingCannotBeAssigned">
            <summary>
              Looks up a localized string similar to String indexing cannot be assigned to, it is read only.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kStringIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The index to string is out of range.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kStringOverIndexed">
            <summary>
              Looks up a localized string similar to String is over indexed.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kTypeUndefined">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not defined.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kUnboundIdentifierMsg">
            <summary>
              Looks up a localized string similar to Variable &apos;{0}&apos; hasn&apos;t been defined yet.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kUsingNonStaticMemberInStaticContext">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a static property, so cannot be assigned to static properties or used in static methods..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kUsingThisInStaticFunction">
            <summary>
              Looks up a localized string similar to &apos;this&apos; cannot be used in static method.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_break_expected">
            <summary>
              Looks up a localized string similar to kw_break expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_class_expected">
            <summary>
              Looks up a localized string similar to kw_class expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_constructor_expected">
            <summary>
              Looks up a localized string similar to kw_constructor expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_continue_expected">
            <summary>
              Looks up a localized string similar to kw_continue expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_def_expected">
            <summary>
              Looks up a localized string similar to kw_def expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_else_expected">
            <summary>
              Looks up a localized string similar to kw_else expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_elseif_expected">
            <summary>
              Looks up a localized string similar to kw_elseif expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_extend_expected">
            <summary>
              Looks up a localized string similar to kw_extend expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_external_expected">
            <summary>
              Looks up a localized string similar to kw_external expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_for_expected">
            <summary>
              Looks up a localized string similar to kw_for expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_from_expected">
            <summary>
              Looks up a localized string similar to kw_from expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_heap_expected">
            <summary>
              Looks up a localized string similar to kw_heap expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_if_expected">
            <summary>
              Looks up a localized string similar to kw_if expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_import_expected">
            <summary>
              Looks up a localized string similar to kw_import expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_local_expected">
            <summary>
              Looks up a localized string similar to kw_local expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_native_expected">
            <summary>
              Looks up a localized string similar to kw_native expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_prefix_expected">
            <summary>
              Looks up a localized string similar to kw_prefix expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_static_expected">
            <summary>
              Looks up a localized string similar to kw_static expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.kw_while_expected">
            <summary>
              Looks up a localized string similar to kw_while expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.lessequal_expected">
            <summary>
              Looks up a localized string similar to lessequal expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.lessthan_expected">
            <summary>
              Looks up a localized string similar to lessthan expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ListMethodDeprecated">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has been deprecated, please use method &apos;{1}&apos; instead with Dictionary type.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.literal_false_expected">
            <summary>
              Looks up a localized string similar to literal_false expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.literal_null_expected">
            <summary>
              Looks up a localized string similar to literal_null expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.literal_true_expected">
            <summary>
              Looks up a localized string similar to literal_true expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.MapsValueFromOneRangeToAnotherRange">
            <summary>
              Looks up a localized string similar to Maps a vlaue from one range to another range.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.MapsValueIntoInputRange">
            <summary>
              Looks up a localized string similar to Maps a value into an input range.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.MaxDimensionExceeded">
            <summary>
              Looks up a localized string similar to Replication requested exceeds the available dimensions of the array. This case is not yet supported {0}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ModuloByZero">
            <summary>
              Looks up a localized string similar to Integer modulo by zero.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.MoreThanOneDominantList">
            <summary>
              Looks up a localized string similar to Only one dominant list is allowed.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.MultipleFunctionsFound">
            <summary>
              Looks up a localized string similar to Couldn&apos;t decide which function to execute. Please provide more specific type information. Possible functions were: .
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.MultipleGuidesNotSupported">
            <summary>
              Looks up a localized string similar to Sorry, multiple guides on a single argument that are not in increasing order are not yet supported, please use a for loop instead. .
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.neg_expected">
            <summary>
              Looks up a localized string similar to neg expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.NoConstructorForAttribute">
            <summary>
              Looks up a localized string similar to No constructors for Attribute &apos;{0}&apos; takes {1} arguments.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.NonOverloadMethodResolutionError">
            <summary>
              Looks up a localized string similar to {0} expects argument type(s) ({1}), but was called with ({2}). href=NonOverloadMethodResolutionError.html.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.NoSuchFileOrDirectoryToImport">
            <summary>
              Looks up a localized string similar to Cannot import file: &apos;{0}&apos;: No such file or directory.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.not_expected">
            <summary>
              Looks up a localized string similar to not expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.notequal_expected">
            <summary>
              Looks up a localized string similar to notequal expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.number_expected">
            <summary>
              Looks up a localized string similar to number expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ObjectsContainsInList1NotInList2">
            <summary>
              Looks up a localized string similar to Returns objects that are included in List1 but excluded in List2.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.OneDArrayExpected">
            <summary>
              Looks up a localized string similar to Both arguments were expected to be one-dimensional array type!.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.openbrace_expected">
            <summary>
              Looks up a localized string similar to &quot;{&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.openbracket_expected">
            <summary>
              Looks up a localized string similar to openbracket expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.openparen_expected">
            <summary>
              Looks up a localized string similar to openparen expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.OperationFailType1">
            <summary>
              Looks up a localized string similar to {0}.{1} operation failed..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.OperationFailType2">
             <summary>
               Looks up a localized string similar to {0}.{1} operation failed. 
            {2}.
             </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.oror_expected">
            <summary>
              Looks up a localized string similar to &quot;||&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.period_expected">
            <summary>
              Looks up a localized string similar to period expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.pipe_expected">
            <summary>
              Looks up a localized string similar to pipe expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.postfixed_replicationguide_expected">
            <summary>
              Looks up a localized string similar to postfixed replicationguide expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.power_expected">
            <summary>
              Looks up a localized string similar to &quot;^&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.private_expected">
            <summary>
              Looks up a localized string similar to &quot;private&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ProducesTheSetIntersection">
            <summary>
              Looks up a localized string similar to Produces the set intersection of two sequences.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ProducesTheSetUnion">
            <summary>
              Looks up a localized string similar to Produces the set union of two sequences by using the default equality comparer.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.protected_expected">
            <summary>
              Looks up a localized string similar to &quot;protected&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.public_expected">
            <summary>
              Looks up a localized string similar to &quot;public&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.question_expected">
            <summary>
              Looks up a localized string similar to &quot;?&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.RangeExpressionOutOfMemory">
            <summary>
              Looks up a localized string similar to The number of items in range expression is over limit.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.rangeop_expected">
            <summary>
              Looks up a localized string similar to rangeop expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.reminder_expected">
            <summary>
              Looks up a localized string similar to &quot;%&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.RemoveKeys">
            <summary>
              Looks up a localized string similar to Removes key from list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.RemoveKeys1">
            <summary>
              Looks up a localized string similar to Removes a copy of array with specified key removed.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.RemovesTheMembersofTheList">
            <summary>
              Looks up a localized string similar to Removes the members of the list which are not members of the specified type.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReordersList">
            <summary>
              Looks up a localized string similar to Reorders the list using the specified indices.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.replicationguide_postfix_expected">
            <summary>
              Looks up a localized string similar to replicationguide_postfix expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsConcatenatingList">
            <summary>
              Looks up a localized string similar to Joins two lists into a single list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsListWithRankDepth">
            <summary>
              Looks up a localized string similar to Returns multidimentional list according the rank given.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsListWithUniformDepth">
            <summary>
              Looks up a localized string similar to Returns a list with uniform depth as specified by the input depth.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsNumberOfItems">
            <summary>
              Looks up a localized string similar to Returns number of items in the specified list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnStatementIsNotAllowedInConstructor">
            <summary>
              Looks up a localized string similar to return statement is not allowed in constructor.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsTheDeepestDepthOfTheList">
            <summary>
              Looks up a localized string similar to Returns the deepest depth of the list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsTheFlattened1DList">
            <summary>
              Looks up a localized string similar to Returns the flattened 1D list of the multi-dimensional input list. If the input is a single value, returns that value..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsTheIndex">
            <summary>
              Looks up a localized string similar to Returns the index of the member in the list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsTheNumberOfFalseValueInList">
            <summary>
              Looks up a localized string similar to Returns the number of  false values in the list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ReturnsTheNumberOfTrueValue">
            <summary>
              Looks up a localized string similar to Returns the number of true values in the list.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.RunOutOfMemory">
            <summary>
              Looks up a localized string similar to There is not enough memory to finish the operation..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.SemiColonExpected">
            <summary>
              Looks up a localized string similar to &apos;;&apos; is expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.SortsListByValue">
            <summary>
              Looks up a localized string similar to Sorts a specified list by the values of its members in either ascending or descending order.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.SortsListByValueInAscending">
            <summary>
              Looks up a localized string similar to Sorts a specified list by values of its members in ascending order.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.textstring_expected">
            <summary>
              Looks up a localized string similar to textstring expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.this_symbo_no_expected_in_Associative_NonAssignmentStatement">
            <summary>
              Looks up a localized string similar to this symbol not expected in Associative_NonAssignmentStatement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.this_symbol_no_expected_in_Associative_FunctionalStatement">
            <summary>
              Looks up a localized string similar to this symbol not expected in Associative_FunctionalStatement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.this_symbol_not_expected_in_Associative_FunctionalStatement">
            <summary>
              Looks up a localized string similar to this symbol not expected in Associative_FunctionalStatement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.this_symbol_not_expected_in_Associative_FunctionCallStatement">
            <summary>
              Looks up a localized string similar to this symbol not expected in Associative_FunctionCallStatement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.this_symbol_not_expected_in_Associative_Statement">
            <summary>
              Looks up a localized string similar to this symbol not expected in Associative_Statement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.this_symbol_not_expected_in_Import_Statement">
            <summary>
              Looks up a localized string similar to this symbol not expected in Import_Statement.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.throw_expected">
            <summary>
              Looks up a localized string similar to throw expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.TooManyCharacters">
            <summary>
              Looks up a localized string similar to Too many characters in character literal.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.triquestionmark_expected">
            <summary>
              Looks up a localized string similar to ??? expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.try_expected">
            <summary>
              Looks up a localized string similar to &quot;try&quot; expected.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.UnknownAttribute">
            <summary>
              Looks up a localized string similar to Unknown attribute {0}.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.UseInlineConditional">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; statement can only be used in imperative language block, consider using an inline conditional instead?.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.UseListJoinNode">
            <summary>
              Looks up a localized string similar to Use List.Join node instead.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ValidForImperativeBlockOnly">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; statement can only be used in imperative language block.
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.VariableRecursiveReference">
            <summary>
              Looks up a localized string similar to Variable {0} is used in the same statement that you defined it. Recursive dependency is not allowed..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.VariableRedifinitionError">
            <summary>
              Looks up a localized string similar to Variable {0} has been defined in this code block node. You cannot define a variable more than once..
            </summary>
        </member>
        <member name="P:ProtoCore.Properties.Resources.ZipAlgorithmError">
            <summary>
              Looks up a localized string similar to Cannot support Longest and shortest zipped collections.
            </summary>
        </member>
        <member name="T:ProtoCore.Mirror.GraphicObjectType">
            <summary>
            This class reflects on properties of a given type and finds graphic data
            provider for them. If any of the property type has graphic data provider
            it gets the graphic items from those properties. It doesn't query indexed
            properties only uses public properties.
            </summary>
        </member>
        <member name="T:ProtoCore.Mirror.MirrorObject">
            <summary>
            An abstract MirrorObject that represents a generic DesignScript object that can reflected
            Reflection on this object can be done at compiletime or runtime
            </summary>
        </member>
        <member name="T:ProtoCore.Mirror.RuntimeMirror">
            <summary>
             A RuntimeMirror object is used to reflect on the runtime status of a single designsript variable
            </summary>
        </member>
        <member name="F:ProtoCore.Mirror.RuntimeMirror.mirrorData">
            <summary>
            This is the generic data associated with this mirror
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.RuntimeMirror.TargetExecutive">
            <summary>
             The runtime executive that we are reflecting on
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.RuntimeMirror.GetData">
            <summary>
             Retrieve the data associated with this RuntimeMirror
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.RuntimeMirror.GetStringData">
            <summary>
            This method will return the string representation of the mirror data if it is available
            </summary>
        </member>
        <member name="T:ProtoCore.Mirror.StaticMirror">
            <summary>
            StaticMirror is a base class representing all Mirror classes that 
            perform static (build time) reflection on types
            Static reflection can be done without executing the code
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.StaticMirror.Name">
            <summary>
            Name of the Mirror object - In the case of:
            ClassMirror: class name
            MethodMirror: method name
            PropertyMirror: property name
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.StaticMirror.GetOverloadsOnBuiltIns(ProtoCore.Core,System.String)">
            <summary>
            Returns list of overloads (one or more) for a given built-in method
            </summary>
            <param name="core"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.StaticMirror.GetClasses(ProtoCore.Core)">
            <summary>
            Get all reference type classes imported in the VM 
            except for internal and placeholder types
            </summary>
            <param name="core"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.StaticMirror.GetAllTypes(ProtoCore.Core)">
            <summary>
            Get all types except for internal VM types
            </summary>
            <param name="core"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.StaticMirror.GetGlobals(ProtoCore.Core)">
            <summary>
            Get all methods and properties for all classes
            </summary>
            <param name="core"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.StaticMirror.GetBuiltInMethods(ProtoCore.Core)">
            <summary>
            List of built-in methods that are preloaded by default
            </summary>
        </member>
        <member name="T:ProtoCore.Mirror.ClassMirror">
            <summary>
             A ClassMirror object reflects upon the type of a single designscript variable
             The information here is populated during the code generation phase
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.ClassMirror.ClassName">
            <summary>
            Fully qualified class name
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.ClassMirror.Alias">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.ClassMirror.ClassNodeID">
            <summary>
            The ID of the underlying ClassNode. This is only valid
            if a known imported type was found in the vm. Returns -1 if there is no
            valid underlying classNode this mirror reflects.
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.ClassMirror.IsEmpty">
            <summary>
            True if the class is a dummy, placeholder class
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.#ctor(ProtoCore.DSASM.StackValue,ProtoCore.Core)">
            <summary>
            Constructor to construct ClassMirror from runtime data i.e. StackValue
            </summary>
            <param name="svData">StackValue</param>
            <param name="core">ProtoCore.Core</param>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetMembers">
            <summary>
            Returns a list of constructors and static methods and properties 
            belonging to the type and its base types. Filters out repeating names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetClassHierarchy">
            <summary>
            Returns the base class hierarchy for the given class
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetProperties">
            <summary>
             Returns the list of class properties of this class 
            </summary>
            <returns> symbol nodes</returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetConstructors">
            <summary>
            Returns the list of constructors defined for the given class
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetFunctions">
            <summary>
             Returns the list of functions of the class only
            </summary>
            <returns> function nodes </returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetOverloads(System.String)">
            <summary>
            Given the method name, return the list of all matching 
            constructors and member functions of this type only
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetOverloadsOnType(System.String)">
            <summary>
            Given a method name, return the matching list of 
            constructors or static methods on this type and its base types
            Excludes hidden methods from base types.
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetOverloadsOnInstance(System.String)">
            <summary>
            Given a method name, return the matching list of 
            instance methods on this type and its base types
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.ClassMirror.GetInstanceMembers">
            <summary>
            Returns the instance methods and properties 
            belonging to the type and its base types. Filters out repeating names.
            </summary>
        </member>
        <member name="T:ProtoCore.Mirror.MethodMirror">
            <summary>
            Reflects upon a Function to retrieve its arguments
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.PropertyMirror.Argument">
            <summary>
            E.g. For an instance property, Prop of ClassA, this is:
            (this : ClassA) otherwise for a static property it is an empty string.
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.PropertyMirror.ToString">
            <summary>
            For an instance property of a class, called "Property"
            this returns the string
            "Property : 'return type' (this : 'class type')."
            For a static property of a class,  this returns
            "Property : 'return type'."
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.Mirror.LibraryMirror">
            <summary>
            The LibraryMirror reflects upon an assembly or DS file to return assembly specific information
            such as imported classes, global methods, etc.
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.LibraryMirror.GetClasses">
            <summary>
            Returns list of classes imported from a given assembly
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProtoCore.Mirror.MirrorData">
            <summary>
             An object that performs marshalling of all relevant data associated with this object
            </summary>
        </member>
        <member name="F:ProtoCore.Mirror.MirrorData.svData">
            <summary>
             The stack value associated with this mirror data
            </summary>
        </member>
        <member name="F:ProtoCore.Mirror.MirrorData.dataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.#ctor(ProtoCore.Core,ProtoCore.DSASM.StackValue)">
            <summary>
            Experimental constructor that takes in a core object
            Takes a core object to read static data
            </summary>
            <param name="core"></param>
            <param name="sv"></param>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.#ctor(ProtoCore.Core,ProtoCore.RuntimeCore,ProtoCore.DSASM.StackValue)">
            <summary>
            Takes a runtime core object to read runtime data
            </summary>
            <param name="core"></param>
            <param name="runtimeCore"></param>
            <param name="sv"></param>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.GetPointersRecursively(ProtoCore.DSASM.StackValue,System.Collections.Generic.List{ProtoCore.DSASM.StackValue})">
            <summary>
            Recursively finds all Pointers from the stack value
            </summary>
            <param name="sv">Stack value</param>
            <param name="values">Stack values</param>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.GetStackValue">
            <summary>
             Retrieve the stack value for this mirror
            </summary>
            <returns></returns>
        </member>
        <member name="F:ProtoCore.Mirror.MirrorData.classMirror">
            <summary>
            The DesignScript Class info mirror.
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.GetClass">
            <summary>
            Returns the Class info mirror for this data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProtoCore.Mirror.MirrorData.Class">
            <summary>
            Returns ClassMirror if this data is an instance of a DesignScript Class.
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.GetElements">
            <summary>
            Returns the list of MirrorData if this data represents a collection,
            else null.
            </summary>
            <returns>List of MirrorData represented by this data.</returns>
        </member>
        <member name="F:ProtoCore.Mirror.MirrorData.clrdata">
            <summary>
            The CLR object represented by this MirrorData
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.GetData(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Returns clr object represented by given StackValue. It handles
            DS primitive types such as Int, Double, Bool, Char, String and 
            Pointer if the pointer represents an FFI object. For other cases
            it returns null.
            </summary>
            <param name="sv">StackValue</param>
            <param name="runtimeCore">ProtoCore.Core</param>
            <returns>System.Object</returns>
        </member>
        <member name="P:ProtoCore.Mirror.MirrorData.StringData">
            <summary>
            Returns string representation of data
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.MirrorData.Data">
            <summary>
            Returns the CLR object for all the value type or FFI objects, else null
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.MirrorData.IsNull">
            <summary>
            Returns if this data points to null.
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.MirrorData.IsCollection">
            <summary>
            Determines if this data points to a collection.
            </summary>
        </member>
        <member name="P:ProtoCore.Mirror.MirrorData.IsPointer">
            <summary>
            Determines if this data is a pointer
            </summary>
        </member>
        <member name="M:ProtoCore.Mirror.MirrorData.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.Reflection.Reflect(System.String,System.Int32,ProtoCore.RuntimeCore,ProtoCore.Core)">
            <summary>
             Returns a runtime mirror that can be reflected upon
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Mirror.Reflection.Reflect(System.String,System.Collections.Generic.IList{ProtoCore.DSASM.ClassNode},ProtoCore.Core)">
            <summary>
             Returns a library mirror that can be reflected upon
             The LibraryMirror is  used for static reflection of classes etc.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ProtoCore.Runtime.RuntimeMemory.startFramePointer">
            <summary>
            Where the first stack frame starts. Usually the stack below this
            pointer is reserved for global variables. 
            </summary>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.PushFrameForLocals(System.Int32)">
            <summary>
            Reserve specified number of stack slots for local variables
            and initialize them to Null.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.PushFrameForGlobals(System.Int32)">
            <summary>
            Reserve stack for global variables. 
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.PopFrame(System.Int32)">
            <summary>
            Remove the specified number of items from the stack.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.GetSymbolValue(ProtoCore.DSASM.SymbolNode)">
            <summary>
            Returns the value of symbol on current stack frame.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.GetSymbolValueOnFrame(ProtoCore.DSASM.SymbolNode,System.Int32)">
            <summary>
            Returns the value of symbol on specified frame. 
            </summary>
            <param name="symbol"></param>
            <param name="framePointer"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.SetSymbolValue(ProtoCore.DSASM.SymbolNode,ProtoCore.DSASM.StackValue)">
            <summary>
            Set the value for symbol on current stack frame.
            </summary>
            <param name="symbol"></param>
            <param name="data"></param>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.GetStackIndex(ProtoCore.DSASM.SymbolNode,System.Int32)">
            <summary>
            Returns stack index of symbol for specified frame.
            </summary>
            <param name="symbol"></param>
            <param name="framePointer"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Runtime.RuntimeMemory.PushConstructBlockId(System.Int32)">
            <summary>
            Push the block ID of the block that will be executed
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:ProtoCore.Runtime.RuntimeMemory.CurrentStackFrame">
            <summary>
            Current stack frame.
            </summary>
        </member>
        <member name="P:ProtoCore.Runtime.RuntimeMemory.CurrentStackFrameThisPtr">
            <summary>
            Current stack frame ClassScope.
            </summary>
        </member>
        <member name="P:ProtoCore.Runtime.RuntimeMemory.CurrentStackFrameClassScope">
            <summary>
            Current stack frame ClassScope.
            </summary>
        </member>
        <member name="P:ProtoCore.Runtime.RuntimeMemory.CurrentStackFrameFunctionScope">
            <summary>
            Current stack frame FunctionScope.
            </summary>
        </member>
        <member name="P:ProtoCore.Runtime.RuntimeMemory.CurrentStackFrameFunctionBlock">
            <summary>
            Current stack frame FunctionScope.
            </summary>
        </member>
        <member name="T:ProtoCore.RuntimeCore">
            <summary>
            RuntimeCore is an object that is instantiated once across the lifecycle of the runtime
            This is the entry point of the runtime VM and its input is a DS Executable format. 
            There will only be one instance of RuntimeCore regardless of how many times instances of a DSASM.Executive (runtime VM) is instantiated.
            Its properties will be persistent and accessible across all instances of a DSASM.Executive
            </summary>
        </member>
        <member name="M:ProtoCore.RuntimeCore.SetupForExecution(ProtoCore.Core,System.Int32)">
            <summary>
            Setup before execution
            This function needs to be called before attempting to execute the RuntimeCore
            It will initialize the runtime execution data and configuration
            </summary>
            <param name="compileCore"></param>
            <param name="globalStackFrameSize"></param>
        </member>
        <member name="M:ProtoCore.RuntimeCore.RegisterDllTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            Register imported dll types
            These types are initialzed from Importing dlls
            </summary>
            <param name="dllTypes"></param>
        </member>
        <member name="P:ProtoCore.RuntimeCore.RunningBlock">
            <summary>
            The currently executing blockID
            </summary>
        </member>
        <member name="F:ProtoCore.RuntimeCore.RuntimeExpressionUID">
            <summary>
            RuntimeExpressionUID is used by the associative engine at runtime to determine the current expression ID being executed
            </summary>
        </member>
        <member name="P:ProtoCore.RuntimeCore.ReasonForExecutionSuspend">
            <summary>
            Returns the reason why the execution was last suspended
            </summary>
        </member>
        <member name="F:ProtoCore.RuntimeCore.LastDispatchedCallSite">
            <summary>
            This field is used to keep track of the last dispatched callsite 
            to detect when a different callsite is dispatched to.
            </summary>
        </member>
        <member name="M:ProtoCore.RuntimeCore.SetupStartPC">
            <summary>
            This function determines what the starting pc should be for the next execution session
            The StartPC takes precedence if set. Otherwise, the entry pc in the global codeblock is the entry point
            StartPC is assumed to be reset to kInvalidPC after each execution session
            </summary>
        </member>
        <member name="M:ProtoCore.RuntimeCore.SetStartPC(System.Int32)">
            <summary>
            Sets a new entry point pc
            This can be overrided by another call to SetStartPC
            </summary>
            <param name="pc"></param>
        </member>
        <member name="M:ProtoCore.RuntimeCore.RecordExtecutedGraphNode(ProtoCore.AssociativeGraph.GraphNode)">
            <summary>
            Record the GUID of executed graph node.
            </summary>
            <param name="graphNode"></param>
        </member>
        <member name="M:ProtoCore.RuntimeCore.RemoveExecutedAstGuids">
            <summary>
            Clear all recorded AST guids
            </summary>
        </member>
        <member name="T:ProtoCore.RuntimeData">
            <summary>
            The RuntimeData is an object that contains properties that is consumed only by the runtime VM
            It is instantiated prior to execution and is populated with information gathered from the CompileCore
            
            The runtime VM is designed to run independently from the front-end (UI, compiler) 
            and the only 2 properties it needs are the RuntimeData and the DSExecutable.
            
            The RuntimeData will also contain properties that are populated at runtime and consumed at runtime.
            </summary>
        </member>
        <member name="P:ProtoCore.RuntimeData.CallsiteCache">
            <summary>
            Map from callsite id to callsite.
            </summary>
        </member>
        <member name="P:ProtoCore.RuntimeData.CallSiteToNodeMap">
            <summary>		
            Map from a callsite's guid to a graph UI node. 		
            </summary>
        </member>
        <member name="P:ProtoCore.RuntimeData.NodeToCallsiteObjectMap">
            <summary>		
            Map from a graph UI node to callsite identifiers. 		
            </summary>
        </member>
        <member name="M:ProtoCore.RuntimeData.GetCallSite(System.Int32,System.String,ProtoCore.DSASM.Executable,ProtoCore.RuntimeCore)">
            <summary>
            Retrieves an existing instance of a callsite associated with a UID
            It creates a new callsite if non was found
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.RuntimeData.GetCallsitesForNodes(System.Collections.Generic.IEnumerable{System.Guid},ProtoCore.DSASM.Executable)">
            <summary>
            This API is used by host integrations such as for Revit and C3D.
            It is used to get the trace data list for all nodes binding to elements in the host.
            </summary>
            <param name="nodeGuids"></param>
            <param name="executable"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.RuntimeData.GetTraceDataForNodes(System.Collections.Generic.IEnumerable{System.Guid},ProtoCore.DSASM.Executable)">
            <summary>
            Call this method to obtain serialized trace data for a list of nodes.
            </summary>
            <param name="nodeGuids">A list of System.Guid of nodes whose 
            serialized trace data is to be retrieved. This parameter cannot be 
            null.</param>
            <param name="executable">A container of callsite data for the nodes in the graph.</param>
            <returns>Returns a dictionary that maps each node Guid to its 
            corresponding list of serialized callsite trace data.</returns>
        </member>
        <member name="M:ProtoCore.RuntimeData.SetTraceDataForNodes(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.List{ProtoCore.CallSite.RawTraceData}}})">
            <summary>
            Call this method to set the list of serialized trace data, 
            possibly loaded from an external storage.
            </summary>
            <param name="nodeDataPairs">A Dictionary that matches a node Guid 
            to its corresponding list of serialized callsite trace data.</param>
            
        </member>
        <member name="M:ProtoCore.RuntimeData.GetAndRemoveTraceDataForNode(System.Guid,System.String)">
            <summary>
            Call this method to pop the top-most serialized callsite trace data.
            Note that this call only pops off a single callsite trace data 
            belonging to a given UI node denoted by the given node guid.
            </summary>
            <param name="nodeGuid">The Guid of a given UI node whose top-most 
            <param name="callsiteID"></param>
            callsite trace data is to be retrieved and removed.</param>
            <returns>Returns the serialized callsite trace data in Base64 encoded
            string for the given UI node.</returns>
        </member>
        <member name="M:ProtoCore.RuntimeStatus.LogFunctionGroupNotFoundWarning(System.String,System.Int32,System.Collections.Generic.List{ProtoCore.DSASM.StackValue})">
            <summary>
            Report that the method cannot be found.
            </summary>
            <param name="methodName">The method that cannot be found</param>
            <param name="classScope">The class scope of object</param>
            <param name="arguments">Arguments</param>
        </member>
        <member name="T:ProtoCore.SyntaxAnalysis.AstTraversal">
            <summary>
            AstTraversal visits all nodes of the AST unless the result of a Visit* method is false or you override one of the methods such that
            it doesn't visit all of the Node's child nodes.
            </summary>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetGreatestCommonSubclassForArray(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            If an empty array is passed, the result will be null
            if there are instances, but they share no common supertype the result will be var
            </summary>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetTypeExamplesForLayer(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            This method returns the distinct(by metadata type) reduced params for all the elements inside the
            paramStackValue, if it is an array. If it is not an array, it just returns the paramStackValue.
            </summary>
            <param name="paramStackValue"></param>
            <param name="runtimeCore"></param>
            <returns> A dictionary where the value is the current ReducedParam and the key is its metaData type</returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetTypeExamplesForLayerWithoutArraySampling(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Similar to GetTypeExamplesForLayer but it returns all non-empty arrays.
            Its purpose is to support inspecting heterogeneous arrays in replication scenarios.
            </summary>
            <param name="array"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetTypeStatisticsForLayer(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Generate type statistics for given layer of an array
            </summary>
            <param name="array"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetTypeStatisticsForArray(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Generate type statistics for the whole array
            </summary>
            <param name="array"></param>
            <param name="runtimeCore"></param>
            <returns>usage frequency by type</returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.ContainsDoubleElement(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Whether sv is double or arrays contains double value.
            </summary>
            <param name="sv"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.ContainsNonArrayElement(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            If the passed in value is not an array or an empty array or an array which contains only empty arrays, return false.
            Otherwise, return true;
            </summary>
            <param name="sv"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetFirstNonArrayStackValue(ProtoCore.DSASM.StackValue,ProtoCore.DSASM.StackValue@,ProtoCore.RuntimeCore)">
            <summary>
            Retrieve the first non-array element in an array 
            </summary>
            <param name="svArray"></param>
            <param name="sv"></param>
            <param name="runtimeCore"></param>
            <returns> true if the element was found </returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetFirstNonArrayStackValueRecursive(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Recursively searches a stack value that is not an array in the given array.
            </summary>
            <param name="svArray">Stack value representing an array</param>
            <param name="runtimeCore">Runtime core</param>
            <returns>The first stack value found that is not an array. Null if none is found.</returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetZippedIndices(System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.RuntimeCore)">
            <summary>
            For an array we supporting zipped replicaiton for array indexing as 
            well. I.e., for the following expression:
            
                a[1..3][2..4] = x;
            
            It will be expanded to 
            
                a[1][2] = x;
                a[2][3] = x;
                a[3][4] = x;
                
            So here we need to calculate zipped indices. The length of returned 
            indices is decided by the shortest length of index that used in 
            array indexing. E.g.,
            
            For array indexing
            
                [{1, 2, 3}][{"x", "y"}][{6, 7, 8}], i.e., 
                
                1 -> "x" -> 6
                2 -> "y" -> 7
                3 ->     -> 8
            
            The shortest length of index is 2 ({"x", "y"}), so function will 
            returns:
            
                {{1, "x", 6}, {2, "y", 7}}
                
            </summary>
            <param name="indices"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.IsEmpty(ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Returns true if an array is an empty list or all its elements are empty lists.
            </summary>
            <param name="arrayPointer"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ArrayUtils.GetCommonItems``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Returns the list of common items from a given collection of generic lists 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lists"></param>
            <returns>list of common items from multiple lists</returns>
        </member>
        <member name="M:ProtoCore.Utils.ClassUtils.GetClassUpcastChain(ProtoCore.DSASM.ClassNode,ProtoCore.RuntimeCore)">
            <summary>
            Returns the list of classes that this can be upcast to
            It includes the class itself
            </summary>
            <param name="cn"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ClassUtils.GetUpcastCountTo(ProtoCore.DSASM.ClassNode,ProtoCore.DSASM.ClassNode,ProtoCore.RuntimeCore)">
            <summary>
            Returns the number of upcasts that need to be performed to turn a class into another class in its upcast chain
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CompilerUtils.PreCompile(System.String,ProtoCore.Core,ProtoCore.AST.AssociativeAST.CodeBlockNode,System.Int32@)">
            <summary>
            Does the first pass of compilation and returns a list of wanrnings in compilation
            </summary>
            <param name="code"></param>
            <param name="core"></param>
            <param name="codeBlock"></param>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CompilerUtils.PreCompileCodeBlock(ProtoCore.Core,ProtoCore.Utils.ParseParam,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Pre-compiles DS code in code block node, 
            checks for syntax, converts non-assignments to assignments,
            stores list of AST nodes, errors and warnings
            Evaluates and stores list of unbound identifiers
            </summary>
            <param name="core"></param>
            <param name="parseParams"> container for compilation related parameters </param>
            <param name="priorNames"></param>
            <returns> true if code compilation succeeds, false otherwise </returns>
        </member>
        <member name="M:ProtoCore.Utils.CompilerUtils.Check(System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            Check does some sanity check, e.g., if a variable is re-defined.
            </summary>
            <param name="asts"></param>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetFunctionHash(ProtoCore.AST.AssociativeAST.FunctionDefinitionNode)">
            <summary>
            Returns the has id of a function signature given the name and argument types
            </summary>
            <param name="functionDef"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetIdentifierStringUntilFirstParenthesis(ProtoCore.AST.Node)">
            <summary>
            Retrieves the string format of the identifier list from left to right, leaving out any symbols after the last identifier.
            Given: A.B()
                Return: "A.B"
            Given: A.B.C()[0]
                Return: "A.B.C"
            Given: A.B().C
                Return: "A.B"
            Given: A.B[0].C
                Return: "A.B[0].C"
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetIdentifierExceptMethodName(ProtoCore.AST.AssociativeAST.IdentifierListNode)">
            <summary>
            Retrieves the string format of the identifier list from left to right, leaving out any symbols after the last identifier.
            Given: A.B()
                Return: "A"
            Given: A.B.C()[0]
                Return: "A.B"
            Given: A.B().C
                Return: "A"
            Given: A.B[0].C
                Return: "A.B[0].C"
            Given: A().B (global function)
                Return: empty string
            Given: A.B[0].C()
                Return: "A.B[0]"
            </summary>
            <param name="identList"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetIdentifierExceptMethodName(ProtoCore.AST.ImperativeAST.IdentifierListNode)">
            <summary>
            Retrieves the string format of the identifier list from left to right, leaving out any symbols after the last identifier.
            Given: A.B()
                Return: "A"
            Given: A.B.C()[0]
                Return: "A.B"
            Given: A.B().C
                Return: "A"
            Given: A.B[0].C
                Return: "A.B[0].C"
            Given: A().B (global function)
                Return: empty string
            Given: A.B[0].C()
                Return: "A.B[0]"
            </summary>
            <param name="identList"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetResolvedClassName(ProtoCore.DSASM.ClassTable,ProtoCore.AST.AssociativeAST.AssociativeNode)">
            <summary>
            Inspects the input identifier list to match all class names with the class used in it
            </summary>
            <param name="classTable"></param>
            <param name="identifierList">single identifier or identifier list</param>
            <returns>list of fully resolved class names</returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetAssemblyFromClassName(ProtoCore.DSASM.ClassTable,System.String)">
            <summary>
            Given a partial class name, get assembly to which the class belongs
            </summary>
            <param name="classTable"> class table in Core </param>
            <param name="className"> class name </param>
            <returns> assembly to which the class belongs </returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.CreateNodeFromString(System.String)">
            <summary>
            Given a name or string of names, this creates an IdentifierNode or IdentifierListNode
            e.g. Creates an IdentifierNode from A and IdentifierListNode from A.B
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.BuildASTList(ProtoCore.Core,System.String)">
            <summary>
            Parses designscript code and outputs ProtoAST
            </summary>
            <param name="core"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.BuildASTList(ProtoCore.Core,System.Collections.Generic.List{System.String})">
            <summary>
            Parses designscript code and outputs ProtoAST
            </summary>
            <param name="core"></param>
            <param name="codeList"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetCodeBlock(System.Collections.Generic.List{ProtoCore.DSASM.CodeBlock},System.Int32)">
            <summary>
            Returns the Codeblock given the blockId
            </summary>
            <param name="blockList"></param>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.GetDataOfValue(ProtoCore.Mirror.MirrorData)">
            <summary>
            Returns the CLR object for a given mirror data
            </summary>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.AddStackValueString(ProtoCore.DSASM.StackValue,ProtoCore.DSASM.StackValue,ProtoCore.RuntimeCore)">
            <summary>
            Performs addition on 2 StackValues
            This is used by the VM when adding strings
            </summary>
            <param name="sv1"></param>
            <param name="sv2"></param>
            <param name="runtimeCore"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.CoreUtils.IsPrimitiveASTNode(ProtoCore.AST.AssociativeAST.AssociativeNode)">
            <summary>
            Checks if an AST node is a primitive
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.FileUtils.GetDSFullPathName(System.String,ProtoCore.Options)">
            <summary>
            Locates the given file from the search path options and gets the 
            full file path.
            </summary>
            <param name="fileName">Name of the file to locate</param>
            <param name="options">Options structure for search path, if options 
            is null it will search only in the executing assembly path or the
            current directory.</param>
            <returns>Full path for the file if located successfully else the 
            file name when failed to locate the given file</returns>
        </member>
        <member name="T:ProtoCore.Utils.ParseResult">
            <summary>
            Parse result.
            </summary>
        </member>
        <member name="P:ProtoCore.Utils.ParseResult.CodeBlockNode">
            <summary>
            All code related AST nodes will be saved in a CodeBlockNode.
            </summary>
        </member>
        <member name="P:ProtoCore.Utils.ParseResult.CommentBlockNode">
            <summary>
            All comment related AST nodes will be saved in a CodeBlockNode.
            </summary>
        </member>
        <member name="T:ProtoCore.Utils.ParserUtils">
            <summary>
            These are string manipulation utility functions that focus on lexing and parsing heuristics
            </summary>
        </member>
        <member name="M:ProtoCore.Utils.ParserUtils.Parse(System.String)">
            <summary>
            Parses designscript code and returns a ProtoAST CodeBlockNode
            </summary>
            <param name="code"> Source code to parse </param>
        </member>
        <member name="M:ProtoCore.Utils.ParserUtils.CreateParser(System.String,ProtoCore.Core)">
            <summary>
            Returns a parser for the DS code.
            </summary>
        </member>
        <member name="M:ProtoCore.Utils.ParserUtils.ParseWithCore(System.String,ProtoCore.Core)">
            <summary>
            Parses desginscript code with specified core and returns a 
            ProtoAST CodeBlockNode
            </summary>
            <param name="code"></param>
            <param name="core"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.ParserUtils.ParseRHSExpression(System.String,ProtoCore.Core)">
            <summary>
            Parse simple RHS expression
            </summary>
            <param name="expression"></param>
            <param name="core"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.StringUtils.BreakTextIntoLines(System.String)">
            <summary>
            Following suggestions from stackoverflow,
            A reliable method for breaking text into lines
            using Regex is used.
            https://stackoverflow.com/questions/1508203/best-way-to-split-string-into-lines
            </summary>
            <param name="text"> text to break into lines</param>
            <returns> text lines </returns>
        </member>
        <member name="M:ProtoCore.Utils.StringUtils.TabToSpaceConversion(System.String,System.Int32)">
            <summary>
            Replace all tabs with spaces given the text and tab spacing size
            </summary>
            <param name="text"></param>
            <param name="tabSpacingSize"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoCore.Utils.StringUtils.SpaceToTabConversion(System.String,System.Int32)">
            <summary>
            Replace all spaces with tabs given the text and tab spacing size
            </summary>
            <param name="text"></param>
            <param name="tabSpacingSize"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoFFI.CLRModuleType">
            <summary>
            This class creates ClassDeclNode for a given type and caches all the
            imported types. This class also keeps the list of FFIFunctionPointer
            for the given type.
            </summary>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.#ctor(System.Type)">
            <summary>
            Private constructor to create empty CLRModuleType.
            </summary>
            <param name="type">System.Type</param>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.GetInstance(System.Type,ProtoFFI.CLRDLLModule,System.String)">
            <summary>
            Returns CLRModuleType for given Type. If CLRModuleType instance for the
            given type is not found, it creates a new one. If CLRDLLModule is
            passed as null, it creates empty CLRModuleType.
            </summary>
            <param name="type">System.Type to be imported in DesignScript</param>
            <param name="module">CLRDLLModule which imports this type</param>
            <param name="alias">Alias name, if any. For now its not supported.</param>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.GetEmptyTypes">
            <summary>
            Returns all the types, which was referenced by other types but were not
            imported explicitly. These are empty types and corresponding DS Type
            don't contain any methods, constructors, properties or fields
            </summary>
            <returns>List of CLRModuleType</returns>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.GetTypes(System.Func{ProtoFFI.CLRModuleType,System.Boolean})">
            <summary>
            Returns all the types for the given predicate.
            </summary>
            <param name="predicate">A delegate for defining criteria</param>
            <returns>List of CLRModuleType</returns>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.GetFunctionPointers(System.String)">
            <summary>
            Returns list of function pointers available on this type for a given
            function name
            </summary>
            <param name="name">Function name</param>
            <returns>List of FFIFunctionPointer</returns>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.EnsureDisposeMethod(ProtoFFI.CLRDLLModule)">
            <summary>
            Ensures that dispose method node is created for this empty type.
            </summary>
            <param name="module">Reference module</param>
        </member>
        <member name="P:ProtoFFI.CLRModuleType.ClassNode">
            <summary>
            Imported ClassDeclNode
            </summary>
        </member>
        <member name="P:ProtoFFI.CLRModuleType.FullName">
            <summary>
            DesignScript Class name, together with Namespace name
            </summary>
        </member>
        <member name="P:ProtoFFI.CLRModuleType.Module">
            <summary>
            CLRDLLModule from which this type was imported.
            </summary>
        </member>
        <member name="P:ProtoFFI.CLRModuleType.CLRType">
            <summary>
            System.Type that was imported
            </summary>
        </member>
        <member name="P:ProtoFFI.CLRModuleType.ProtoCoreType">
            <summary>
            Imported ProtoCore.Type
            </summary>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.GetDSOperatorName(System.String)">
            <summary>
            Convert C# overloaded opeator name to DS operator name
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.CLRModuleType.ClearTypes">
            <summary>
            This method is for testing, to ensure cache is cleared before every test.
            </summary>
        </member>
        <member name="T:ProtoFFI.CLRDLLModule">
            <summary>
            Implements DLLModule for CLR types and FFI. This class supports .NET
            module import to DesignScript and provides FFIFunctionPointer &amp;
            FFIObjectMarshler.
            </summary>
        </member>
        <member name="T:ProtoFFI.CSModuleHelper">
            <summary>
            Helper class to load CLR modules.
            </summary>
        </member>
        <member name="M:ProtoFFI.CSModuleHelper.getModule(System.String)">
            <summary>
            Returns a CLRDLLModule after loading the given assembly.
            </summary>
            <param name="name">Name of assembly.</param>
            <returns>CLRDLLModule for given assembly/module name.</returns>
        </member>
        <member name="T:ProtoFFI.FFIClassAttributes">
            <summary>
                It keeps FFI class's attributes.
            </summary>
        </member>
        <member name="P:ProtoFFI.FFIClassAttributes.Attributes">
            <summary>
            FFI class attributes.
            </summary>
        </member>
        <member name="T:ProtoFFI.FFIMethodAttributes">
            <summary>
            It keeps FFI method's attributes.
            </summary>
        </member>
        <member name="P:ProtoFFI.FFIMethodAttributes.Attributes">
            <summary>
            FFI method attributes.
            </summary>
        </member>
        <member name="T:ProtoFFI.FFIParamAttributes">
            <summary>
            A parameter's attributes.
            </summary>
        </member>
        <member name="M:ProtoFFI.AttributeUtils.SupressImportIntoVM(System.Attribute)">
            <summary>
            Checks if the given attribute is of type SupressImportIntoVMAttribute
            </summary>
            <param name="attribute">Given attribute</param>
            <returns>True if the given attribute is of type SupressImportIntoVMAttribute</returns>
        </member>
        <member name="M:ProtoFFI.AttributeUtils.HiddenInDynamoLibrary(System.Attribute)">
            <summary>
            Checks if the given attribute is of type IsVisibleInDynamoLibraryAttribute
            and has Visible property set to false.
            </summary>
            <param name="attribute">Given attribute</param>
            <returns>True if the given attribute is of 
            IsVisibleInDynamoLibraryAttribute type and has Visible property false.</returns>
        </member>
        <member name="T:ProtoFFI.FFIParameterInfo">
            <summary>
            FFIParameterInfo wraps ParameterInfo and attributes that applied to
            the parameter.
            </summary>
        </member>
        <member name="P:ProtoFFI.FFIParameterInfo.Info">
            <summary>
            ParameterInfo
            </summary>
        </member>
        <member name="M:ProtoFFI.FFIParameterInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Create FFIParameterInfo by ParameterInfo
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:ProtoFFI.FFIParameterInfo.KeepReference">
            <summary>
            Indicate if the marshaller should keep a reference to this
            parameter in the return object of the corresponding function call.
            </summary>
        </member>
        <member name="M:ProtoFFI.FFIMemberInfo.CheckForRankReductionAttribute(System.Collections.Generic.Dictionary{System.Reflection.MethodInfo,System.Attribute[]})">
            <summary>
            This method is used to copy the AllowRankReductionAttribute 
            from a Zero Touch property to the property's getter function.
            </summary>
            <param name="getterAttributes"></param>
        </member>
        <member name="P:ProtoFFI.FFIMemberInfo.KeepReferenceThis">
            <summary>
            If the member has "KeepReferenceThis" attribute, the returned
            DS object will be expanded and be added a reference to "this"
            object.
            </summary>
        </member>
        <member name="M:ProtoFFI.CLRFFIFunctionPointer.SetReferenceObjects(ProtoCore.DSASM.StackValue,System.Collections.Generic.List{ProtoCore.DSASM.StackValue},ProtoCore.DSASM.Executive)">
             <summary>
             If dsValue is a pointer (object), expand the size of this object and
             add references to referencedObjects; if dsValue is an array, then
             traverse recursively.
            
             Exception: ProtoCore.Exception.RunOutOfMemoryException if the engine
             fails to expand the size of object.
             </summary>
             <param name="dsValue"></param>
             <param name="referencedObjects"></param>
             <param name="exec"></param>
        </member>
        <member name="T:ProtoFFI.DisposeFunctionPointer">
            <summary>
            Implements a special _Dispose method for all IDisposable objects.
            </summary>
        </member>
        <member name="T:ProtoFFI.IntMarshaler">
            <summary>
            Marshales integer based primitive types.
            </summary>
        </member>
        <member name="T:ProtoFFI.FloatMarshaler">
            <summary>
            Marshales floating point primitive types.
            </summary>
        </member>
        <member name="T:ProtoFFI.BoolMarshaler">
            <summary>
            Marshales boolean
            </summary>
        </member>
        <member name="T:ProtoFFI.CharMarshaler">
            <summary>
            Marshales char
            </summary>
        </member>
        <member name="M:ProtoFFI.ArrayMarshaler.#ctor(ProtoFFI.CLRObjectMarshaler,ProtoCore.Type)">
            <summary>
            Constructor for the ArrayMarshaler
            </summary>
            <param name="primitiveMarshaler">Marshaler to marshal primitive type</param>
            <param name="type">Expected DS type for marshaling</param>
        </member>
        <member name="T:ProtoFFI.StringMarshaler">
            <summary>
            Marshales string as array of chars
            </summary>
        </member>
        <member name="T:ProtoFFI.CLRObjectMarshaler">
            <summary>
            This class marshals CLR Objects to DS Object and vice-versa.
            </summary>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetInstance(ProtoCore.RuntimeCore)">
            <summary>
            Returns instance of the CLRObjectMarshler for a given core. If marshler
            is not already created, it creates a new one.
            </summary>
            <param name="core">Core object.</param>
            <returns>CLRObjectMarshler</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.Marshal(System.Object,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter,ProtoCore.Type)">
            <summary>
            Marshals the given CLR object to expectedDSType StackValue
            </summary>
            <param name="obj">Input object for marshaling</param>
            <param name="context">Runtime context, not being used</param>
            <param name="dsi">Runtime Interpreter</param>
            <param name="expectedDSType">Expected ProtoCore.Type to marshal as</param>
            <returns>StackValue</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.UnMarshal(ProtoCore.DSASM.StackValue,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter,System.Type)">
            <summary>
            
            </summary>
            <param name="dsObject"></param>
            <param name="context"></param>
            <param name="dsi"></param>
            <param name="expectedCLRType"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetMarshalerForCLRType(System.Type,ProtoCore.DSASM.StackValue)">
            <summary>
            If clrType is IEnumerable, returns a CollectionMarshaler, otherwise
            gets marshaler for the given clrType and if it fails
            to get one, it tries to get primitive marshaler based on dsType.
            
            We want to get correct marshaler specific to the input type because
            more than one type gets map to same type in DS.
            </summary>
            <param name="clrType">System.Type to which DS object needs to be 
            marshaled.</param>
            <param name="value">DS Object type, that needs to be marshaled.
            </param>
            <returns>FFIObjectMarshler or null</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetMarshalerForDsType(ProtoCore.Type,System.Type)">
            <summary>
            Returns appropriate marshaler for given DS Type.
            </summary>
            <param name="dsType">DS Type to which given objType needs to be marshaled.</param>
            <param name="objType">CLR object type that needs to marshal.</param>
            <returns>FFIObjectMarshler or null</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetPrimitiveType(ProtoCore.DSASM.AddressType)">
            <summary>
            Returns a primitive System.Type for the given DS type.
            </summary>
            <param name="addressType">DS AddressType</param>
            <returns>System.Type</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetMarshaledType(System.Type)">
            <summary>
            Returns marshaled DS type for the given System.Type
            </summary>
            <param name="type">System.Type</param>
            <returns>ProtoCore.Type as equivalent DS type for input System.Type</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetProtoCoreType(System.Type)">
            <summary>
            Returns equivalent DS type for the input System.Type
            </summary>
            <param name="type">System.Type</param>
            <returns>ProtoCore.Type</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetUserDefinedType(System.Type)">
            <summary>
            Returns the marshaled type for input System.Type as DS Pointer type
            </summary>
            <param name="type">System.Type</param>
            <returns>ProtoCore.Type</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.ComputeDSType(System.Type,ProtoCore.Type@)">
            <summary>
            Computes an equivalent ProtoCore.Type for a given System.Type 
            recursively.
            </summary>
            <param name="type">System.Type</param>
            <param name="protoCoreType">ref ProtoCore.Type</param>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.ComputeArrayType(System.Type)">
            <summary>
            Tries to compute an array type from a given system type if it was 
            IEnumerable derived and a generic type.
            </summary>
            <param name="collectionType">Input type</param>
            <returns>An equivalent array type or null</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.IsMarshaledAsNativeType(System.Type)">
            <summary>
            Checks if the given System.Type is marshaled as native type in DS.
            </summary>
            <param name="type">System.Type</param>
            <returns>True if marshaled as native DS type</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.OnDispose(ProtoCore.DSASM.StackValue,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter)">
            <summary>
            
            </summary>
            <param name="dsObject"></param>
            <param name="context"></param>
            <param name="dsi"></param>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetTypeName(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.CreateDSObject(System.Object,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="context"></param>
            <param name="dsi"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.PopulatePrimaryProperties(System.Object,ProtoCore.DSASM.StackValue,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter,System.Int32)">
            <summary>
            Initializes primary properties on the DS object for given FFI
            object.
            </summary>
            <param name="ffiObject">FFI object in context</param>
            <param name="dsObject">Design script object</param>
            <param name="context">Execution context</param>
            <param name="dsi">Interpreter</param>
            <param name="classIndex">Class index of design script data type</param>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetPrimaryProperties(System.Object)">
            <summary>
            Returns all the properties of input object, that are marked with 
            "Primary" Category.
            </summary>
            <param name="obj">Input FFI object</param>
            <returns>Map of properties and its values</returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetCategory(System.Reflection.MemberInfo)">
            <summary>
            Looks for CategoryAttribute on the given member and returns
            Category value.
            </summary>
            <param name="member">MemberInfo for querying attribute</param>
            <returns>Category name for the member if any, else empty string</returns>
        </member>
        <member name="P:ProtoFFI.CLRObjectMarshaler.DumpXmlProperties">
            <summary>
            Controls whether GetStringValue() to dump Xml properties or not
            </summary>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.GetStringValue(ProtoCore.DSASM.StackValue)">
            <summary>
            
            </summary>
            <param name="dsObject"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.BindObjects(System.Object,ProtoCore.DSASM.StackValue)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="dsobj"></param>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.CreateCLRObject(ProtoCore.DSASM.StackValue,System.Type)">
            <summary>
            
            </summary>
            <param name="dsObject"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.#ctor(ProtoCore.RuntimeCore)">
            <summary>
            Constructor.
            </summary>
            <param name="runtimeCore">Core object for marshler.</param>
        </member>
        <member name="M:ProtoFFI.CLRObjectMarshaler.core_Dispose(ProtoCore.RuntimeCore)">
            <summary>
            Dispose event handler.
            </summary>
            <param name="sender">Core object being disposed.</param>
        </member>
        <member name="T:ProtoFFI.ReferenceEqualityComparer">
            <summary>
            This class compares two CLR objects. It is used in CLRObjectMap to 
            avoid hash collision. 
            </summary>
        </member>
        <member name="T:ProtoFFI.PointerValueComparer">
            <summary>
            This class compares two Pointer type StackValue objects.
            </summary>
        </member>
        <member name="T:ProtoFFI.IContextData">
            <summary>
            Represents an external data to be used as context for execution.
            </summary>
        </member>
        <member name="P:ProtoFFI.IContextData.Name">
            <summary>
            Returns name of the data. This context data can be identified with
            name in designscript world.
            </summary>
        </member>
        <member name="P:ProtoFFI.IContextData.Data">
            <summary>
            The context data as represented in DesignScript
            </summary>
        </member>
        <member name="E:ProtoFFI.IContextData.DataChanged">
            <summary>
            Event notifier to notify when it's data changes.
            </summary>
        </member>
        <member name="P:ProtoFFI.IContextData.ContextProvider">
            <summary>
            Returns the context provider for interpretation of data in designscript
            world.
            </summary>
        </member>
        <member name="T:ProtoFFI.IContextDataProvider">
            <summary>
            Represents a connector to external data source to provide context 
            specific data. This interface provide import/export feature for any 
            context specific data. It also provides a mechanism to capture data 
            interactively.
            </summary>
        </member>
        <member name="P:ProtoFFI.IContextDataProvider.Name">
            <summary>
            Returns the name of this data provider to identify it uniquely.
            </summary>
        </member>
        <member name="M:ProtoFFI.IContextDataProvider.ImportData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the specific context data using the given identifier string.
            </summary>
            <param name="connectionParameters">Input dictionary of connection parameters 
            to connect to the data source to import the data. Each context data in 
            the list contains pair of connection parameter name and value</param>
            <returns></returns>
        </member>
        <member name="M:ProtoFFI.IContextDataProvider.ExportData(ProtoFFI.IContextData[],System.String)">
            <summary>
            Exports data to the specified file. This context provider determines the
            format for data store and returns the connection string for the given
            file using which this data can be imported back again.
            </summary>
            <param name="data">Collection of data that needs to be exported.</param>
            <param name="filePath">Path for the file where this data can be 
            exported and saved.</param>
            <returns>The connection parameters using which the exported data can be 
            imported in future.Each context data in the list contains 
            pair of connection parameter name and value</returns>
        </member>
        <member name="M:ProtoFFI.IContextDataProvider.CaptureData">
            <summary>
            Begins data capture interaction in the specific context and returns 
            collection of captured data.
            </summary>
            <returns>Dictionary of connection parameters to import the data 
            captured by interaction. Each context data in the list contains 
            pair of connection parameter name and value</returns>
        </member>
        <member name="M:ProtoFFI.IContextDataProvider.GetExpression(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns DesignScript expression for given parameters assigned to input
            variable.
            </summary>
            <param name="parameters">Captured parameters to be converted to
            DesignScript expression assigned to the input variable.</param>
            <param name="variable">Variable name to which imported data to be 
            assigned.</param>
            <returns>DesignScript expression string</returns>
        </member>
        <member name="T:ProtoFFI.FFIObjectMarshaler">
            <summary>
            This class is responsible for marshaling of FFI objects to DS world and 
            vice-versa.
            </summary>
        </member>
        <member name="M:ProtoFFI.FFIObjectMarshaler.Marshal(System.Object,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter,ProtoCore.Type)">
            <summary>
            Marshales a given FFI object to DS Object of given ProtoCore.Type
            </summary>
            <param name="obj">The FFI object</param>
            <param name="context">DS execution context</param>
            <param name="dsi">The current runtime interpreter</param>
            <param name="type">Type of DS Object expected</param>
            <returns>Marshaled object as Operand</returns>
        </member>
        <member name="M:ProtoFFI.FFIObjectMarshaler.UnMarshal(ProtoCore.DSASM.StackValue,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter,System.Type)">
            <summary>
            UnMarshales a given DS object to FFI object of given System.Type
            </summary>
            <param name="dsObject">The DS object</param>
            <param name="context">DS execution context</param>
            <param name="dsi">The current runtime interpreter</param>
            <param name="type">Type of FFI object expected</param>
            <returns>Unmarshaled FFI object</returns>
        </member>
        <member name="M:ProtoFFI.FFIObjectMarshaler.GetMarshaledType(System.Type)">
            <summary>
            Returns the marshaled Type of DS object for a given FFI object type
            </summary>
            <param name="type">Type of FFI object</param>
            <returns>Type of DS object</returns>
        </member>
        <member name="M:ProtoFFI.FFIObjectMarshaler.OnDispose(ProtoCore.DSASM.StackValue,ProtoCore.Runtime.Context,ProtoCore.DSASM.Interpreter)">
            <summary>
            This is a callback method called when the given DS object is disposed. 
            Marshaler gets an opportunity to clear the cache related to the given
            DS object.
            </summary>
            <param name="dsObject">DS object being disposed</param>
            <param name="context">DS execution context</param>
            <param name="dsi">The current runtime interpreter</param>
        </member>
        <member name="M:ProtoFFI.FFIObjectMarshaler.GetStringValue(ProtoCore.DSASM.StackValue)">
            <summary>
            Returns a string representation for given DS object
            </summary>
            <param name="dsObject">DS Object</param>
            <returns>string representation of a DS object</returns>
        </member>
        <member name="M:ProtoFFI.ImportModuleHandler.AddToRootImportNodeIfEmpty(ProtoCore.AST.AssociativeAST.AssociativeNode)">
            <summary>
            Checks if the given class node is empty. Also adds the empty class 
            node to code block of mRootImportNode.
            </summary>
            <param name="node">Given node</param>
            <returns>True if the given node is empty class node</returns>
        </member>
    </members>
</doc>
