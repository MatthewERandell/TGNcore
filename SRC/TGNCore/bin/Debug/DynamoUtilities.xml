<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamoUtilities</name>
    </assembly>
    <members>
        <member name="T:Dynamo.Utilities.AssemblyConfiguration">
            <summary>
                A tool for obtaining configuration values from the current Library.  
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.AssemblyHelper.ResolveAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            Handler to the ApplicationDomain's AssemblyResolve event.
            If an assembly's location cannot be resolved, an exception is
            thrown. Failure to resolve an assembly will leave Dynamo in 
            a bad state, so we should throw an exception here which gets caught 
            by our unhandled exception handler and presents the crash dialogue.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Utilities.CLIWrapper">
            <summary>
            Base class for Dynamo CLI wrappers 
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.CLIWrapper.StartProcess(System.String,System.String)">
            <summary>
            Start the process. 
            </summary>
            <param name="relativeEXEPath">relative path to the exe to start.</param>
            <param name="argString">argument string to pass to process.</param>
        </member>
        <member name="M:Dynamo.Utilities.CLIWrapper.KillProcess">
            <summary>
            Kill the CLI tool - if running
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.CLIWrapper.GetToolPath(System.String)">
            <summary>
            Compute the location of the CLI tool.
            </summary>
            <returns>Returns full path to the CLI tool</returns>
        </member>
        <member name="M:Dynamo.Utilities.CLIWrapper.GetData(System.Int32,System.Func{System.String})">
            <summary>
            Read data from CLI tool
            </summary>
            <param name="timeoutms">will return empty string if we don't finish reading all data in the timeout provided in milliseconds.</param>
            <param name="mockReadLine"> if this delegate is non null, it will be used instead of communicating with std out of the process. Used for testing only.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.CLIWrapper.GetCantStartErrorMessage">
            <summary>
            Can't start Error message
            </summary>
            <returns>Returns error message</returns>
        </member>
        <member name="M:Dynamo.Utilities.CLIWrapper.GetCantCommunicateErrorMessage">
            <summary>
            Can't communicate Error message
            </summary>
            <returns>Returns error message</returns>
        </member>
        <member name="T:Dynamo.Utilities.DataMarshaler">
            <summary>
                Provides ability to register data marshalers which can then be used to marshal arbitrary data.
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.DataMarshaler.RegisterMarshaler``1(System.Converter{``0,System.Object})">
            <summary>
                Registers a new data marshaler for a given type.
            </summary>
            <typeparam name="T">Type to marshal.</typeparam>
            <param name="marshaler">Converter to be used to marshaling.</param>
        </member>
        <member name="M:Dynamo.Utilities.DataMarshaler.RegisterMarshaler(System.Type,System.Converter{System.Object,System.Object})">
            <summary>
                Registers a new data marshaler for a given type.
            </summary>
            <param name="t">Type to marshal.</param>
            <param name="marshaler">Converter to be used to marshaling.</param>
        </member>
        <member name="M:Dynamo.Utilities.DataMarshaler.UnregisterMarshalerOfType``1">
            <summary>
                Unregisters a data marshaler for a given type.
            </summary>
            <typeparam name="T">Type of data to unregister marshaling for.</typeparam>
        </member>
        <member name="M:Dynamo.Utilities.DataMarshaler.UnregisterMarshalerOfType(System.Type)">
            <summary>
                Unregisters a data marshaler for a given type.
            </summary>
            <param name="t">Type of data to unregister marshaling for.</param>
        </member>
        <member name="M:Dynamo.Utilities.DataMarshaler.Marshal(System.Object)">
            <summary>
                Marshals data using the registered marshalers. If no marshaler exists, data is returned unmodified.
            </summary>
            <param name="obj">Data to marshal.</param>
        </member>
        <member name="T:Dynamo.Utilities.DebugModes">
            <summary>
            Provide functionality around debug modes. Similar to feature flags.
            </summary>
        </member>
        <member name="T:Dynamo.Utilities.DebugModes.DebugMode">
            <summary>
            Represents an instance of a debug mode
            </summary>
        </member>
        <member name="F:Dynamo.Utilities.DebugModes.DebugMode.Name">
            <summary>
            Name of the debug mode
            </summary>
        </member>
        <member name="F:Dynamo.Utilities.DebugModes.DebugMode.Description">
            <summary>
            Description of the debug mode
            </summary>
        </member>
        <member name="F:Dynamo.Utilities.DebugModes.DebugMode.IsEnabled">
            <summary>
            Whether debug mode is enabled or not
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.DebugModes.AddDebugMode(System.String,System.String,System.Boolean)">
            <summary>
            Adds a debug mode
            </summary>
            <param name="name">Name of the debug mode</param>
            <param name="description">Name about the debug mode</param>
            /// <param name="isEnabled">Sets if the debug mode should be enabled on startup</param>
        </member>
        <member name="M:Dynamo.Utilities.DebugModes.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.DebugModes.SetDebugModeEnabled(System.String,System.Boolean)">
            <summary>
            Enables/Disables a debug mode
            </summary>
            <param name="name">Name of the debug mode</param>
            <param name="enabled">Enable/Disable debug mode</param>
        </member>
        <member name="M:Dynamo.Utilities.DebugModes.GetDebugModes">
            <summary>
            Returns a dictionary of all the debug modes
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.DebugModes.GetDebugMode(System.String)">
            <summary>
            Retrieves a debug mode
            </summary>
            <param name="name">Name of the debug mode</param>
        </member>
        <member name="M:Dynamo.Utilities.DebugModes.IsEnabled(System.String)">
            <summary>
            Retrieves the state of a debug mode (enabled/disabled)
            </summary>
            <param name="name">Name of the debug mode</param>
        </member>
        <member name="T:Dynamo.Utilities.IRecursiveGrouping`1">
            <summary>
                A collection of recursive groupings that have a common key.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Dynamo.Utilities.ITree`2">
            <summary>
                A tree that has a tag, leaves, and subtrees.
            </summary>
            <typeparam name="TNodeTag"></typeparam>
            <typeparam name="TLeaf"></typeparam>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of an element in an IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The IEnumerable</param>
            <param name="value">The value for which the index is sought</param>
            <returns>Zero or greater if in the IEnumerable, otherwise -1</returns>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.GetAllTags``2(Dynamo.Utilities.ITree{``0,``1})">
            <summary>
                Returns all the tags of an ITree.
            </summary>
            <typeparam name="TNodeTag"></typeparam>
            <typeparam name="TLeaf"></typeparam>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.GroupByRecursive``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.ICollection{``1}})">
            <summary>
                Contructs a tree by recursively grouping elements from a sequence. Essentially, performs
                a GroupBy operation, and then for each Grouping, performs another GroupBy, assuming there
                is a GroupBy key available for the sub-group.
            </summary>
            <typeparam name="TLeaf"></typeparam>
            <typeparam name="TNodeKey"></typeparam>
            <param name="allLeaves"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.ToTree``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,System.Collections.Generic.ICollection{``0}},``0)">
            <summary>
                Contructs a tree by recursively grouping elements from a sequence. Essentially, performs
                a GroupBy operation, and then for each Grouping, performs another GroupBy, assuming there
                is a GroupBy key available for the sub-group.
            </summary>
            <typeparam name="TNodeTag"></typeparam>
            <typeparam name="TLeaf"></typeparam>
            <param name="entries"></param>
            <param name="categorySelector"></param>
            <param name="rootTag"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.GroupByRecursive``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.ICollection{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``0},``2},``1)">
            <summary>
                Contructs a tree by recursively grouping elements from a sequence. Essentially, performs
                a GroupBy operation, and then for each Grouping, performs another GroupBy, assuming there
                is a GroupBy key available for the sub-group.
            </summary>
            <typeparam name="TLeaf"></typeparam>
            <typeparam name="TNodeKey"></typeparam>
            <typeparam name="TTree"></typeparam>
            <param name="allLeaves"></param>
            <param name="keySelector"></param>
            <param name="treeCreator"></param>
            <param name="rootKey"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Utilities.ExtensionMethods.IIndexed`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.RemoveAll``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Predicate{``0})">
            <summary>
            An extension to the ObservableCollection class which allows you 
            to remove all objects which don't pass a predicate method.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="coll">The observable collection.</param>
            <param name="predicate">The predicate method.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.ExtensionMethods.LongestSet``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns the longest list of arguments.
            For a set List of Lists like {a} {b1,b2,b3} {c1,c2}
            This will return a List of Lists of objects like:
            {a,b1,c1} {a,b2,c2} {a,b3,c2}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequences"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Utilities.GuidUtility">
            <summary>
            Helper methods for working with <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.GuidUtility.tryParseOrCreateGuid(System.String)">
            <summary>
            attempts to parse a string into a guid - 
            if this fails, uses the create method to create
            a deterministic UUID.
            </summary>
            <param name="idstring"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.GuidUtility.Create(System.Guid,System.String)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <returns>A UUID derived from the namespace and name.</returns>
            <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
        </member>
        <member name="M:Dynamo.Utilities.GuidUtility.Create(System.Guid,System.String,System.Int32)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <param name="version">The version number of the UUID to create; this value must be either
            3 (for MD5 hashing) or 5 (for SHA-1 hashing).</param>
            <returns>A UUID derived from the namespace and name.</returns>
            <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
        </member>
        <member name="F:Dynamo.Utilities.GuidUtility.DnsNamespace">
            <summary>
            The namespace for fully-qualified domain names (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Dynamo.Utilities.GuidUtility.UrlNamespace">
            <summary>
            The namespace for URLs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Dynamo.Utilities.GuidUtility.IsoOidNamespace">
            <summary>
            The namespace for ISO OIDs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.GuidUtility.UpdateWorkspaceGUIDs(System.String)">
            <summary>
            Performs an update to all Guids inside the json string before deserialization.
            Targets specifically Guids without the '-' hyphen, which are all the workspace elements.
            Replacing all occurrences of each individual Guid guarantees that the relationships between the elements are retained.
            </summary>
            <param name="jsonData">Json representation of workspace.</param>
            <returns>String representation of workspace after all elements' Guids replaced.</returns>
        </member>
        <member name="M:Dynamo.Utilities.Hash.GetHash(System.Byte[])">
            <summary>
            Get the hash value
            </summary>
            <param name="bytes">input as a byte array</param>
            <returns>hash as a byte array</returns>
        </member>
        <member name="M:Dynamo.Utilities.Hash.GetHashFromString(System.String)">
            <summary>
            Get the hash value
            </summary>
            <param name="str">input as a string</param>
            <returns>hash as a byte array</returns>
        </member>
        <member name="M:Dynamo.Utilities.Hash.GetFilenameFromHash(System.Byte[])">
            <summary>
            Get a valid filename for a hash
            </summary>
            <param name="bytes">hash as a byte array</param>
            <returns>hash as a valid filename string</returns>
        </member>
        <member name="M:Dynamo.Utilities.Hash.GetHashFilenameFromString(System.String)">
            <summary>
            Get hash file name
            </summary>
            <param name="str">inout as a string</param>
            <returns>hash as a valid filename</returns>
        </member>
        <member name="F:Dynamo.Utilities.Hash.Base32AllowedCharacters">
            <summary>
            /// The different characters allowed in Base32 encoding.
            </summary>
            <remarks>
            This is a 32-character subset of the twenty-six letters A–Z and six digits 2–7.
            <see href="https://en.wikipedia.org/wiki/Base32" />
            </remarks>
        </member>
        <member name="M:Dynamo.Utilities.Hash.ToBase32String(System.Byte[],System.Boolean)">
            <summary> /// Converts a byte array into a Base32 string.
            </summary>
            <param name="input">The string to convert to Base32.</param>
            <param name="addPadding">Whether or not to add RFC3548 '='-padding to the string.</param>
            <returns>A Base32 string.</returns>
            <remarks>
            https://tools.ietf.org/html/rfc3548#section-2.2 indicates padding MUST be added unless the reference to the RFC tells us otherswise.
            https://github.com/google/google-authenticator/wiki/Key-Uri-Format indicates that padding SHOULD be omitted.
            To meet both requirements, you can omit padding when required.
            </remarks>
        </member>
        <member name="T:Dynamo.Utilities.Md2Html">
            <summary>
            Utilities for converting Markdown to html and for sanitizing html
            The Md2Html command line tool is used for doing the actual conversion/santizing
            (This tool is delivered as part of Dynamo)
            This class is not thread safe so please instantiate this class in the same thread that
            you intend to use.
            But multiple instances of the class is supported.
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.#ctor">
            <summary>
            Constructor
            Start the CLI tool and keep it around
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.Dispose(System.Boolean)">
            <summary>
            Kill the CLI tool, if still running
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.Dispose">
            <summary>
            Kill the CLI tool, if still running
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.ParseMd2Html(System.String,System.String)">
            <summary>
            Converts a markdown string into Html.
            </summary>
            <param name="mdString"></param>
            <param name="mdPath"></param>
            <returns>Returns converted markdown as html</returns>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.SanitizeHtml(System.String)">
            <summary>
            Sanitize Html
            </summary>
            <param name="content"></param>
            <returns>Returns Sanitized Html or an empty string if no sanitization was needed</returns>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.GetCantStartErrorMessage">
            <summary>
            Can't start Error message
            </summary>
            <returns>Returns error message</returns>
        </member>
        <member name="M:Dynamo.Utilities.Md2Html.GetCantCommunicateErrorMessage">
            <summary>
            Can't communicate Error message
            </summary>
            <returns>Returns error message</returns>
        </member>
        <member name="E:Dynamo.Utilities.ObservableHashSet`1.CollectionChanged">
            <summary>
            Event raised when items are added or removed from the hash set. 
            Currently, it is possible for listeners to determine if items are added, 
            however, removed items cannot be accessed from the NotifyCollectionChangedEventArgs argument.
            </summary>
        </member>
        <member name="T:Dynamo.Utilities.IEither`2">
            <summary>
                Object containing an instance of one of two potential types, labeled "Left" or "Right".
            </summary>
            <typeparam name="TLeft">Type of a potential "Left" value.</typeparam>
            <typeparam name="TRight">Type of a potential "Right" value.</typeparam>
        </member>
        <member name="M:Dynamo.Utilities.IEither`2.BindRight``1(System.Func{`1,Dynamo.Utilities.IEither{`0,``0}})">
            <summary>
                If the IEither(TLeft, TRight) instance contains a Right value, project the Right value into
                a new IEither(TLeft, TNewRight). If the instance contains a Left value, just return the instance.
            </summary>
            <typeparam name="TNewRight">The new type of a potential Right value.</typeparam>
            <param name="selector">Function used to project a Right value.</param>
        </member>
        <member name="M:Dynamo.Utilities.IEither`2.BindLeft``1(System.Func{`0,Dynamo.Utilities.IEither{``0,`1}})">
            <summary>
                If the IEither(TLeft, TRight) instance contains a Left value, project the Left value into
                a new IEither(TNewLeft, TRight). If the instance contains a Right value, just return the instance.
            </summary>
            <typeparam name="TNewLeft">The new type of a potential Left value.</typeparam>
            <param name="selector">Function used to project a Left value.</param>
        </member>
        <member name="M:Dynamo.Utilities.IEither`2.Select``2(System.Func{`0,``0},System.Func{`1,``1})">
            <summary>
                Create a new IEither(TNewLeft, TNewRight) instance by passing the value the a conversion
                function. Which function is selected depends on whether it is a Right or Left value.
            </summary>
            <typeparam name="TNewLeft">The new type of a potential Left value.</typeparam>
            <typeparam name="TNewRight">The new type of a potential Right value.</typeparam>
            <param name="leftSelector">Function used to convert a Left value.</param>
            <param name="rightSelector">Function used to convert a Right value.</param>
        </member>
        <member name="M:Dynamo.Utilities.IEither`2.Match``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
                Produces a new value of type T using one of the given functions, based on whether the
                IEither(TLeft, TRight) contains a Left or Right value.
            </summary>
            <typeparam name="T">Type of objects produced by either match case.</typeparam>
            <param name="leftCase">Function used to create a result from a Left value.</param>
            <param name="rightCase">Function used to create a result from a Right value.</param>
        </member>
        <member name="P:Dynamo.Utilities.IEither`2.LeftValue">
            <summary>
                Attempts to get a Left value.
            </summary>
        </member>
        <member name="P:Dynamo.Utilities.IEither`2.RightValue">
            <summary>
                Attempts to get a Right value.
            </summary>
        </member>
        <member name="P:Dynamo.Utilities.IEither`2.IsLeft">
            <summary>
                Specifies if this instance contains a Left value. If true, it does. If false,
                it contains a Right value.
            </summary>
        </member>
        <member name="T:Dynamo.Utilities.Either">
            <summary>Utility methods for working with Either instances.</summary>
        </member>
        <member name="M:Dynamo.Utilities.Either.Left``2(``0)">
            <summary>
                Creates a new IEither(TLeft, TRight) instance containing a Left value.
            </summary>
            <typeparam name="TLeft">Type of the Left value.</typeparam>
            <typeparam name="TRight">Type of a potential Right value.</typeparam>
            <param name="value">Left value to be stored in the new IEither(TLeft, TRight) instance.</param>
        </member>
        <member name="M:Dynamo.Utilities.Either.Right``2(``1)">
            <summary>
                Creates a new IEither(TLeft, TRight) instance containing a Right value.
            </summary>
            <typeparam name="TLeft">Type of a potential Left value.</typeparam>
            <typeparam name="TRight">Type of the Right value.</typeparam>
            <param name="value">Right value to be stored in the new IEither(TLeft, TRight) instance.</param>
        </member>
        <member name="M:Dynamo.Utilities.Either.SelectLeft``3(Dynamo.Utilities.IEither{``0,``2},System.Func{``0,``1})">
            <summary>
                Return an IEither(TNewLeft, TRight) instance by either passing the contained Left value
                to a conversion function, or propagating the Right value.
            </summary>
            <typeparam name="TOldLeft">The original type of a potential Left value.</typeparam>
            <typeparam name="TNewLeft">The new type of a potential Left value.</typeparam>
            <typeparam name="TRight">The type of a potential Right value.</typeparam>
            <param name="either">An IEither(TOldLeft, TRight) instance.</param>
            <param name="selector">Function used to convert a Left value.</param>
        </member>
        <member name="M:Dynamo.Utilities.Either.SelectRight``3(Dynamo.Utilities.IEither{``0,``1},System.Func{``1,``2})">
            <summary>
                Return an IEither(TLeft, TNewRight) instance by either passing the contained Right value
                to a conversion function, or propagating the Left value.
            </summary>
            <typeparam name="TLeft">The type of a potential Left value.</typeparam>
            <typeparam name="TOldRight">The original type of a potential Right value.</typeparam>
            <typeparam name="TNewRight">The new type of a potential Right value.</typeparam>
            <param name="either">An IEither(TLeft, TOldRight) instance.</param>
            <param name="selector">Function used to convert a Right value.</param>
        </member>
        <member name="M:Dynamo.Utilities.Either.Match``2(Dynamo.Utilities.IEither{``0,``1},System.Action{``0},System.Action{``1})">
            <summary>
                Performs an given Action based on whether the IEither(TLeft, TRight) contains a Left or
                Right value.
            </summary>
            <typeparam name="TLeft">The type of a potential Left value.</typeparam>
            <typeparam name="TRight">The type of a potential Right value.</typeparam>
            <param name="either">An IEither(TLeft, TRight) instance.</param>
            <param name="leftAction">Action used for a Left value.</param>
            <param name="rightAction">Action used for a Right value.</param>
        </member>
        <member name="T:Dynamo.Utilities.IOption`1">
            <summary>
                Object that either contains a single value, or is empty.
            </summary>
            <typeparam name="T">Type of value potentially contained within.</typeparam>
        </member>
        <member name="M:Dynamo.Utilities.IOption`1.Bind``1(System.Func{`0,Dynamo.Utilities.IOption{``0}})">
            <summary>
                If the IOption(T) instance contains a value, project the value into a new IOption(U)
                instance using the given function. Otherwise, propagate the empty option.
            </summary>
            <typeparam name="U">New type of value potentially contained within.</typeparam>
            <param name="selector">Function used to project a value.</param>
        </member>
        <member name="M:Dynamo.Utilities.IOption`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
                Produces a new value of type U using one of the given functions, based on whether the
                IOption(T) contains a value or not.
            </summary>
            <typeparam name="U">Type of object produced by either match case.</typeparam>
            <param name="someCase">Function used to create a result from a value.</param>
            <param name="noneCase">Function used to create a result from no value.</param>
        </member>
        <member name="P:Dynamo.Utilities.IOption`1.Value">
            <summary>
                Attempts to get a contained value.
            </summary>
        </member>
        <member name="T:Dynamo.Utilities.Option">
            <summary>Utility method for working with Option instances.</summary>
        </member>
        <member name="M:Dynamo.Utilities.Option.Some``1(``0)">
            <summary>
                Creates a new IOption(T) instance containing a value.
            </summary>
            <typeparam name="T">Type of the value contained in the new Option.</typeparam>
            <param name="value">Value to be stored in the new IOption(T) instance.</param>
        </member>
        <member name="M:Dynamo.Utilities.Option.None``1">
            <summary>
                Creates an empty Option.
            </summary>
            <typeparam name="T">Type of the value potentially contained.</typeparam>
        </member>
        <member name="M:Dynamo.Utilities.Option.Select``2(Dynamo.Utilities.IOption{``0},System.Func{``0,``1})">
            <summary>
                Creates a new IOption(U) from an IOption(T) by converting the potentially contained
                value, using a given conversion function.
            </summary>
            <typeparam name="T">Type of the value originally contained.</typeparam>
            <typeparam name="U">Type of the new value potentially contained.</typeparam>
            <param name="option">An option to Select over.</param>
            <param name="selector">A function used to convert the potential value.</param>
        </member>
        <member name="M:Dynamo.Utilities.Option.HasValue``1(Dynamo.Utilities.IOption{``0})">
            <summary>
                Determines if the given Option contains a value or not.
            </summary>
            <typeparam name="T">Type of the value potentially contained.</typeparam>
            <param name="option">Option instance to check for a value.</param>
        </member>
        <member name="T:Dynamo.Utilities.OrderedSet`1">
            <summary>
                A set of unique elements, with insertion order preserved.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.Add(`0)">
            <summary>
            Adds an element to the current set and returns a value to indicate if the element was successfully added. 
            </summary>
            <returns>
            true if the element is added to the set; false if the element is already in the set.
            </returns>
            <param name="item">The element to add to the set.</param>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. 
            </summary>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
            <returns>
            true if the current set is a subset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a superset of a specified collection.
            </summary>
            <returns>
            true if the current set is a superset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <returns>
            true if the current set is a proper superset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set. </param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <returns>
            true if the current set is a proper subset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
            <returns>
            true if the current set and <paramref name="other"/> share at least one common element; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set and the specified collection contain the same elements.
            </summary>
            <returns>
            true if the current set is equal to <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Dynamo.Utilities.OrderedSet`1.Count">
            <summary>
            Returns the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Dynamo.Utilities.OrderedSet`1.IsReadOnly">
            <summary>
            Returns a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Dynamo.Utilities.OrderedSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Dynamo.Utilities.PIIDetector">
            <summary>
            Helper Class for removing PII Data from a JSON workspace
            </summary>
        </member>
        <member name="M:Dynamo.Utilities.PIIDetector.RemovePIIData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Removes the PII data from a JSON workspace indicating the status of the result
            </summary>
            <param name="jsonObject"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.PIIDetector.RemovePIIData(System.String)">
            <summary>
            Removes the PII data based on the information patterns
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.TypeExtensions.GetDefaultConstructor``1">
            <summary>
                Creates a function that constructs an instance of an object of the given
                type.
            </summary>
            <typeparam name="T">The return type of the constructor function.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Utilities.TypeExtensions.GetDefaultConstructor``1(System.Type)">
            <summary>
                Creates a function that constructs an instance of an object of the given
                type.
            </summary>
            <typeparam name="T">The return type of the constructor function.</typeparam>
            <param name="type">The type to create a constructor for.</param>
        </member>
        <member name="M:Dynamo.Utilities.TypeExtensions.GetInstance(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <param name="type">The type on which the method was invoked.</param>
            <returns>An instance of the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dynamo.Utilities.TypeExtensions.GetInstance``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg">The type of the argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument">The argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dynamo.Utilities.TypeExtensions.GetInstance``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dynamo.Utilities.TypeExtensions.GetInstance``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <typeparam name="TArg3">The type of the third argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <param name="argument3">The third argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dynamo.Utilities.VersionUtilities.PartialParse(System.String,System.Int32)">
            <summary>
            Parse the first n fields of a version string.  Delegates to
            Version.Parse.
            </summary>
        </member>
        <member name="T:Dynamo.Scheduler.Disposable">
            <summary>
            Implements IDisposable functionality.
            </summary>
        </member>
        <member name="M:Dynamo.Scheduler.Disposable.Create(System.Action)">
            <summary>
            Constructs a new disposable that calls the delegate when disposed 
            </summary>
            <param name="disposeAction">An action that runs when this object is disposed</param>
            <returns>New disposable object</returns>
        </member>
        <member name="M:Dynamo.Scheduler.Disposable.Create(System.Action,System.Action)">
            <summary>
            Constructs a new disposable that calls the constructorAction when constructed and the disposeAction when disposed 
            </summary>
            <param name="constructorAction">An action that runs when this object is constructed</param>
            <param name="disposeAction">An action that runs when this object is disposed</param>
            <returns>New disposable object</returns>
        </member>
        <member name="T:DynamoUtilities.AsyncMethodState">
            <summary>
            Simple representation of the states of an async method
            Used for identifying issues like Dispose called before async method is finished. 
            </summary>
        </member>
        <member name="M:DynamoUtilities.CertificateVerification.CheckAssemblyForValidCertificate(System.String)">
            <summary>
            Check if a .NET assembly can be loaded and has a valid certificate
            </summary>
            <param name="assemblyPath">Path of the assembly file</param>
            <returns></returns>
        </member>
        <member name="T:DynamoUtilities.DynamoFeatureFlagsManager">
            <summary>
            A wrapper around the DynamoFeatureFlags CLI tool.
            Which is itself a wrapper around LaunchDarkly.
            Not thread safe.
            </summary>
        </member>
        <member name="F:DynamoUtilities.DynamoFeatureFlagsManager.loggedFFIssueOnce">
            <summary>
            set to true after some FF issue is logged. For now we only log once to avoid clients overwhelming the logger.
            </summary>
        </member>
        <member name="F:DynamoUtilities.DynamoFeatureFlagsManager.featureFlagTimeoutMs">
            <summary>
            Timeout in ms for feature flag communication with CLI process.
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoFeatureFlagsManager.#ctor(System.String,System.Threading.SynchronizationContext,System.Boolean)">
            <summary>
            Constructor
            Start the CLI tool and keep it around...
            </summary>
            <param name="userkey">non PII key to identify this user.</param>
            <param name="syncContext">context used for raising FlagRetrieved event.</param>
            <param name="testmode">will not contact feature flag service in testmode, will respond with defaults.</param>
        </member>
        <member name="M:DynamoUtilities.DynamoFeatureFlagsManager.CheckFeatureFlag``1(System.String,``0)">
            <summary>
            Check feature flag value, if it does not exist, return the defaultval.
            </summary>
            <typeparam name="T">Must be a bool or string, only bool or string flags should be created unless this implementation is improved.</typeparam>
            <param name="featureFlagKey">feature flag name</param>
            <param name="defaultval">Currently the flag and default val MUST be a bool or string.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.LockForRead">
            <summary>
            Locks for read. Use this API when you need more control of the lock lifetime
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.LockForWrite">
            <summary>
            Locks for write. Use this API when you need more control of the lock lifetime
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.LockForUpgradeableRead">
            <summary>
            Locks for upgradeable read. Use this API when you need more control of the lock lifetime
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.UnlockForRead">
            <summary>
            Unlocks a read lock. Use this API if you called LockForRead beforehand.
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.UnlockForWrite">
            <summary>
            Unlocks a write lock. Use this API if you called LockForWrite beforehand.
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.UnlockForUpgradeableRead">
            <summary>
            Unlocks an upgradeable read lock. Use this API if you called LockForUpgradeableRead beforehand.
            </summary>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.CreateWriteLock">
            <summary>
            Constructs a disposable object that locks for write and releases the lock when Dispose is called.
            </summary>
            <returns>New disposable object</returns>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.CreateReadLock">
            <summary>
            Constructs a disposable object that locks for read and releases the lock when Dispose is called.
            </summary>
            <returns>New disposable object</returns>
        </member>
        <member name="M:DynamoUtilities.DynamoLock.CreateUpgradeableReadLock">
            <summary>
            Constructs a disposable object that locks for read and allows lock for write in the same scope. Releases the lock when Dispose is called.
            </summary>
            <returns>New disposable object</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.IsValidPath(System.String)">
            <summary>
            Checks if the file path string is valid and file exist.
            </summary>
            <param name="filePath">File path</param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.GetDateModified(System.String)">
            <summary>
            Utility method to get the last time a file has been modified
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.IsReadOnlyPath(System.String)">
            <summary>
            Check if user has readonly privilege to the folder path.
            </summary>
            <param name="filePath">File path</param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.HasWritePermissionOnDir(System.String)">
            <summary>
            Returns whether current user has write access to the folder path.
            </summary>
            <param name="folderPath">Folder path</param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.HasReadPermissionOnDir(System.String)">
            <summary>
            Returns whether current user has read access to the folder path.
            </summary>
            <param name="folderPath">Folder path</param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.isValidXML(System.String,System.Xml.XmlDocument@,System.Exception@)">
            <summary>
            This is a utility method for checking if given path contains valid XML document.
            </summary>
            <param name="path">path to the target xml file</param>
            <param name="xmlDoc">System.Xml.XmlDocument representation of target xml file</param>
            <param name="ex"></param>
            <returns>Return true if file is Json, false if file is not Json, exception as out param</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.isFileContentsValidJson(System.String,System.Exception@)">
            <summary>
            This is a utility method for checking if a given string represents a valid Json document.
            </summary>
            <param name="fileContents"> string contents of target json file</param>
            <param name="ex"></param>
            <returns>Return true if fileContents is Json, false if file is not Json, exception as out param</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.isValidJson(System.String,System.String@,System.Exception@)">
            <summary>
            This is a utility method for checking if given path contains valid Json document.
            </summary>
            <param name="path">path to the target json file</param>
            <param name="fileContents"> string contents of target json file</param>
            <param name="ex"></param>
            <returns>Return true if file is Json, false if file is not Json, exception as out param</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.GetScreenCaptureNameFromPath(System.String,System.Boolean)">
            <summary>
            This is a utility method for generating a default name to the snapshot image. 
            </summary>
            <param name="filePath">File path</param>
            <param name="isTimeStampIncluded">Is timestamp included in file path</param>
            <returns>Returns a default name(along with the timestamp) for the workspace image</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.GetFileSize(System.String)">
            <summary>
            Computes the file size from the path.
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:DynamoUtilities.PathHelper.FileInfoAtPath(System.String,System.Boolean@,System.String@)">
            <summary>
            Checks if the file exists at the specified path and computes size.
            </summary>
            <param name="path">File path</param>
            <param name="fileExists"></param>
            <param name="size"></param>
            <returns>Returns a boolean if the file exists at the path and also returns its size</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.ValidateDirectory(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks is the path is considered valid directory path.
            An exception is thrown if the path is considered invalid.
            A path is considered valid if the following conditions are true:
            1. Path is not null and not empty.
            2. Path is an absolute path (not relative).
            4. Path has valid characters.
            5. Path exists and points to a folder.
            6. Dynamo has read permissions to access the path.
            </summary>
            <param name="directoryPath">The directory path that needs to be validated</param>
            <param name="absolutePath"></param>
            <param name="mustExist"></param>
            <param name="read"></param>
            <param name="write"></param>
            <returns>A normalized and validated path</returns>
            <exception cref="T:System.ArgumentNullException">Input argument is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Input argument is not an absolute path.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Path directory does not exist</exception>
            <exception cref="T:System.Security.SecurityException">Dynamo does not have the required permissions.</exception>
        </member>
        <member name="M:DynamoUtilities.PathHelper.FormatDirectoryPath(System.String)">
            <summary>
            Appends a DirectorySeparatorChar to the end of the path if no separator exists.
            </summary>
            <param name="dirPath"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.IsSubDirectoryOfDirectory(System.String,System.String)">
            <summary>
            Returns true if "subdirectory" input argument is a subdirectory of the "directory" input argument.
            Returns false otherwise.
            </summary>
            <param name="subdirectory"></param>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.GetServiceBackendAddress(System.Object,System.String)">
            <summary>
            Returns the path configured for the requested service to retrieve URL resources
            as defined inside the config file
            </summary>
            <param name="o">The "this" object from where the function is being called from.</param>
            <param name="serviceKey">Service or feature for which the address is being requested. 
            It should match the key specified in the config file.</param>
            <returns>Path that will be used to fetch resources</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.getServiceConfigValues(System.Object,System.String)">
            <summary>
            Returns the path configured for the requested service to retrieve resources value
            as defined inside the config file
            </summary>
            <param name="o">The "this" object from where the function is being called from.</param>
            <param name="serviceKey">Service or feature for which the resource is being requested. 
            It should match the key specified in the config file.</param>
            <returns>Value related to the key in the config file</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.LoadEmbeddedResourceAsString(System.String,System.Reflection.Assembly)">
            <summary>
            Loads embedded resources such as HTML and JS files and returns the content as a string.
            </summary>
            <param name="resourcePath">The resource path to return.</param>
            <param name="assembly">The assembly containing the resource.</param>
            <returns>The embedded resource as a string.</returns>
        </member>
        <member name="M:DynamoUtilities.PathHelper.ExtractAndSaveEmbeddedFont(System.String,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            This function will extract the embedded font file and save it to a specified directory
            </summary>
            <param name="resourcePath">The location of the font resource</param>
            <param name="outputPath">The temporary path to save the resource to</param>
            <param name="outputFileName">The name of the temporary resource file</param>
            <param name="assembly">The assembly containing the resource</param>
        </member>
        <member name="T:DynamoUtilities.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DynamoUtilities.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DynamoUtilities.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DynamoUtilities.Properties.Resources.Md2HtmlCantCommunicateError">
            <summary>
              Looks up a localized string similar to &lt;p&gt;&lt;b&gt;Internal error, please report: Can&apos;t communicate with {0}.&lt;/b&gt;&lt;/p&gt;.
            </summary>
        </member>
        <member name="P:DynamoUtilities.Properties.Resources.Md2HtmlCantStartError">
            <summary>
              Looks up a localized string similar to &lt;p&gt;&lt;b&gt;Internal error, please report: Can&apos;t start {0}.&lt;/b&gt;&lt;/p&gt;.
            </summary>
        </member>
        <member name="T:DynamoUtilities.SmartObservableCollection`1">
            <summary>
            Wrapper over System.Collections.ObjectModel.ObservableCollection that fires minimal notifications.
            This class supports batch operations that should defer CollectionChaned notifications.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:DynamoUtilities.SmartObservableCollection`1.CollectionChangedDuringDeferredReset">
            <summary>
            This event is fired when DeferCollectionReset is used
            DeferCollectionReset only fires a single CollectionChanged Reset event with no added/removed data.
            Use this event to get data on what was added and removed during DeferCollectionReset.
            </summary>
        </member>
        <member name="M:DynamoUtilities.SmartObservableCollection`1.DeferCollectionReset">
            <summary>
            Suppresses all CollectionChanged notifications until the returned IDisposable is destroyed.
            When the returned object is destroyed, a single NotifyCollectionChangedAction.Reset event will be triggered.
            In this case Reset means a major change to the Collection has happened. 
            Make sure that any CollectionChanged handlers know to interpret the Reset event as a major change (not only that the collection was cleared).
            Optionally CollectionChangedDuringDeferredReset can be used to get notifications on what was added/removed.
            </summary>
            <returns>IDisposible that controls the lifetime of the deferred notifications</returns>
        </member>
        <member name="M:DynamoUtilities.SmartObservableCollection`1.DeferCollectionNotification(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IList{`0})">
            <summary>
            Suppresses the all CollectionChanged notifications until the returned IDisposable is destroyed.
            When the returned object is destroyed, a single NotifyCollectionChanged event will be triggered (with the input action and changes as event arguments).
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoUtilities.SmartObservableCollection`1.AddUnique(`0)">
            <summary>
            Adds an item only if the sequence does not have it yet
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:DynamoUtilities.SmartObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the input list to the inner collection and only fires a single CollectionChanged event with the actions set as 
            NotifyCollectionChangedAction.Add and with the input list as the NotifyCollectionChangedEventArgs.NewItems
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:DynamoUtilities.SmartObservableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the input list from the inner collection and only fires a single CollectionChanged event with the actions set as 
            NotifyCollectionChangedAction.Remove and with the removed items as the NotifyCollectionChangedEventArgs.OldItems
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:DynamoUtilities.SmartObservableCollection`1.SetCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the Items and adds the input list to the inner collection.
            Fires two CollectionChanged events, Remove(for previous items in collection) and Add (for the input range).
            </summary>
            <param name="range"></param>
        </member>
    </members>
</doc>
